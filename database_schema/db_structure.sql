--
-- PostgreSQL database dump
--

-- Dumped from database version 17rc1
-- Dumped by pg_dump version 17rc1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: fuzzystrmatch; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA public;


--
-- Name: EXTENSION fuzzystrmatch; Type: COMMENT; Schema: -; Owner:
--

COMMENT ON EXTENSION fuzzystrmatch IS 'determine similarities and distance between strings';


--
-- Name: maturity_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.maturity_type AS ENUM (
    'developing',
    'testing',
    'production'
);


ALTER TYPE public.maturity_type OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: analytics; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.analytics (
                                  id integer NOT NULL,
                                  name character varying(100),
                                  code text,
                                  opt_out_code text
);


ALTER TABLE public.analytics OWNER TO postgres;

--
-- Name: analytics_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.analytics_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.analytics_id_seq OWNER TO postgres;

--
-- Name: analytics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.analytics_id_seq OWNED BY public.analytics.id;


--
-- Name: auth_assignment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_assignment (
                                        item_name character varying(64) NOT NULL,
                                        user_id integer NOT NULL,
                                        created_at integer
);


ALTER TABLE public.auth_assignment OWNER TO postgres;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
                                   id integer NOT NULL,
                                   name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
                                               id bigint NOT NULL,
                                               group_id integer NOT NULL,
                                               permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_item; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_item (
                                  name character varying(64) NOT NULL,
                                  type integer NOT NULL,
                                  description text,
                                  rule_name character varying(64),
                                  data text,
                                  created_at integer,
                                  updated_at integer,
                                  group_code character varying(64)
);


ALTER TABLE public.auth_item OWNER TO postgres;

--
-- Name: auth_item_child; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_item_child (
                                        parent character varying(64) NOT NULL,
                                        child character varying(64) NOT NULL
);


ALTER TABLE public.auth_item_child OWNER TO postgres;

--
-- Name: auth_item_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_item_group (
                                        code character varying(64) NOT NULL,
                                        name character varying(255) NOT NULL,
                                        created_at integer,
                                        updated_at integer
);


ALTER TABLE public.auth_item_group OWNER TO postgres;

--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
                                        id integer NOT NULL,
                                        name character varying(255) NOT NULL,
                                        content_type_id integer NOT NULL,
                                        codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_rule; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_rule (
                                  name character varying(64) NOT NULL,
                                  data text,
                                  created_at integer,
                                  updated_at integer
);


ALTER TABLE public.auth_rule OWNER TO postgres;

--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user (
                                  id integer NOT NULL,
                                  password character varying(128) NOT NULL,
                                  last_login timestamp with time zone,
                                  is_superuser boolean NOT NULL,
                                  username character varying(150) NOT NULL,
                                  first_name character varying(150) NOT NULL,
                                  last_name character varying(150) NOT NULL,
                                  email character varying(254) NOT NULL,
                                  is_staff boolean NOT NULL,
                                  is_active boolean NOT NULL,
                                  date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO postgres;

--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_groups (
                                         id bigint NOT NULL,
                                         user_id integer NOT NULL,
                                         group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO postgres;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_user_permissions (
                                                   id bigint NOT NULL,
                                                   user_id integer NOT NULL,
                                                   permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO postgres;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: cold_storage_autoaccept; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cold_storage_autoaccept (
                                                storage double precision,
                                                user_type character varying(15),
                                                id integer NOT NULL,
                                                autoaccept_number integer
);


ALTER TABLE public.cold_storage_autoaccept OWNER TO postgres;

--
-- Name: cold_storage_autoaccept_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cold_storage_autoaccept_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.cold_storage_autoaccept_id_seq OWNER TO postgres;

--
-- Name: cold_storage_autoaccept_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cold_storage_autoaccept_id_seq OWNED BY public.cold_storage_autoaccept.id;


--
-- Name: cold_storage_limits; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cold_storage_limits (
                                            storage bigint,
                                            user_type character varying(15),
                                            duration integer,
                                            id integer NOT NULL,
                                            number_of_projects integer
);


ALTER TABLE public.cold_storage_limits OWNER TO postgres;

--
-- Name: cold_storage_limits_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cold_storage_limits_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.cold_storage_limits_id_seq OWNER TO postgres;

--
-- Name: cold_storage_limits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cold_storage_limits_id_seq OWNED BY public.cold_storage_limits.id;


--
-- Name: cold_storage_request; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cold_storage_request (
                                             id bigint NOT NULL,
                                             request_id bigint,
                                             storage double precision,
                                             description text,
                                             additional_resources text,
                                             type text,
                                             vm_type integer,
                                             num_of_volumes integer DEFAULT 1
);


ALTER TABLE public.cold_storage_request OWNER TO postgres;

--
-- Name: cold_storage_request_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cold_storage_request_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.cold_storage_request_id_seq OWNER TO postgres;

--
-- Name: cold_storage_request_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cold_storage_request_id_seq OWNED BY public.cold_storage_request.id;


--
-- Name: configuration; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.configuration (
                                      reviewer_num integer,
                                      home_page integer,
                                      privacy_page integer,
                                      help_page integer,
                                      schema_url text
);


ALTER TABLE public.configuration OWNER TO postgres;

--
-- Name: cron_job; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cron_job (
                                 id_cron_job integer NOT NULL,
                                 controller character varying(255) NOT NULL,
                                 action character varying(255) NOT NULL,
                                 "limit" integer,
                                 "offset" integer,
                                 running smallint NOT NULL,
                                 success smallint NOT NULL,
                                 started_at integer,
                                 ended_at integer,
                                 last_execution_time double precision
);


ALTER TABLE public.cron_job OWNER TO postgres;

--
-- Name: cron_job_id_cron_job_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cron_job_id_cron_job_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.cron_job_id_cron_job_seq OWNER TO postgres;

--
-- Name: cron_job_id_cron_job_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cron_job_id_cron_job_seq OWNED BY public.cron_job.id_cron_job;


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
                                         id integer NOT NULL,
                                         action_time timestamp with time zone NOT NULL,
                                         object_id text,
                                         object_repr character varying(200) NOT NULL,
                                         action_flag smallint NOT NULL,
                                         change_message text NOT NULL,
                                         content_type_id integer,
                                         user_id integer NOT NULL,
                                         CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
                                            id integer NOT NULL,
                                            app_label character varying(100) NOT NULL,
                                            model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
                                          id bigint NOT NULL,
                                          app character varying(255) NOT NULL,
                                          name character varying(255) NOT NULL,
                                          applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
                                       session_key character varying(40) NOT NULL,
                                       session_data text NOT NULL,
                                       expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- Name: email; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.email (
                              id integer NOT NULL,
                              recipient_ids integer[],
                              type text,
                              sent_at timestamp without time zone,
                              message text,
                              project_id integer
);


ALTER TABLE public.email OWNER TO postgres;

--
-- Name: email_events; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.email_events (
                                     id integer NOT NULL,
                                     user_id integer,
                                     user_creation boolean,
                                     new_project boolean,
                                     project_decision boolean,
                                     new_ticket boolean,
                                     expires_30 boolean,
                                     expires_15 boolean,
                                     edit_project boolean DEFAULT false,
                                     expires_1 boolean,
                                     expires_5 boolean
);


ALTER TABLE public.email_events OWNER TO postgres;

--
-- Name: email_events_admin; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.email_events_admin (
                                           id integer NOT NULL,
                                           user_id integer,
                                           user_creation boolean,
                                           new_ticket boolean,
                                           expires_1 boolean,
                                           expires_5 boolean
);


ALTER TABLE public.email_events_admin OWNER TO postgres;

--
-- Name: email_events_admin_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.email_events_admin_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.email_events_admin_id_seq OWNER TO postgres;

--
-- Name: email_events_admin_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.email_events_admin_id_seq OWNED BY public.email_events_admin.id;


--
-- Name: email_events_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.email_events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.email_events_id_seq OWNER TO postgres;

--
-- Name: email_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.email_events_id_seq OWNED BY public.email_events.id;


--
-- Name: email_events_moderator; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.email_events_moderator (
                                               id integer NOT NULL,
                                               user_id integer,
                                               new_project boolean,
                                               expires_30 boolean,
                                               expires_15 boolean,
                                               expires_1 boolean,
                                               expires_5 boolean,
                                               project_decision boolean,
                                               edit_project boolean
);


ALTER TABLE public.email_events_moderator OWNER TO postgres;

--
-- Name: email_events_moderator_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.email_events_moderator_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.email_events_moderator_id_seq OWNER TO postgres;

--
-- Name: email_events_moderator_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.email_events_moderator_id_seq OWNED BY public.email_events_moderator.id;


--
-- Name: email_events_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.email_events_user (
                                          id integer NOT NULL,
                                          user_id integer,
                                          project_decision boolean,
                                          expires_1 boolean,
                                          expires_5 boolean,
                                          expires_30 boolean,
                                          expires_15 boolean
);


ALTER TABLE public.email_events_user OWNER TO postgres;

--
-- Name: email_events_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.email_events_user_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.email_events_user_id_seq OWNER TO postgres;

--
-- Name: email_events_user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.email_events_user_id_seq OWNED BY public.email_events_user.id;


--
-- Name: email_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.email_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.email_id_seq OWNER TO postgres;

--
-- Name: email_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.email_id_seq OWNED BY public.email.id;


--
-- Name: email_verification_id_seq_1; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.email_verification_id_seq_1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.email_verification_id_seq_1 OWNER TO postgres;

--
-- Name: email_verification; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.email_verification (
                                           id integer DEFAULT nextval('public.email_verification_id_seq_1'::regclass) NOT NULL,
                                           verification_token character varying(100) NOT NULL,
                                           user_id integer NOT NULL,
                                           created_at timestamp without time zone NOT NULL,
                                           email character varying(128) NOT NULL,
                                           expiry timestamp without time zone NOT NULL,
                                           status smallint DEFAULT 0 NOT NULL
);


ALTER TABLE public.email_verification OWNER TO postgres;

--
-- Name: hot_volumes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.hot_volumes (
                                    id integer NOT NULL,
                                    name text,
                                    project_id bigint,
                                    volume_id text,
                                    mountpoint text,
                                    accepted_at timestamp without time zone,
                                    vm_type integer,
                                    active boolean,
                                    deleted_at timestamp without time zone,
                                    deleted_by text,
                                    vm_id bigint,
                                    created_at timestamp without time zone,
                                    mult_order integer DEFAULT 1
);


ALTER TABLE public.hot_volumes OWNER TO postgres;

--
-- Name: hot_volumes_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.hot_volumes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.hot_volumes_id_seq OWNER TO postgres;

--
-- Name: hot_volumes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.hot_volumes_id_seq OWNED BY public.hot_volumes.id;


--
-- Name: jupyter_autoaccept; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.jupyter_autoaccept (
                                           num_of_jobs integer,
                                           cores integer,
                                           ram double precision,
                                           user_type character varying(15),
                                           id integer NOT NULL,
                                           autoaccept_number integer
);


ALTER TABLE public.jupyter_autoaccept OWNER TO postgres;

--
-- Name: jupyter_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.jupyter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.jupyter_id_seq OWNER TO postgres;

--
-- Name: jupyter_images_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.jupyter_images_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.jupyter_images_id_seq OWNER TO postgres;

--
-- Name: jupyter_images; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.jupyter_images (
                                       id bigint DEFAULT nextval('public.jupyter_images_id_seq'::regclass) NOT NULL,
                                       description text,
                                       image text,
                                       gpu boolean DEFAULT false
);


ALTER TABLE public.jupyter_images OWNER TO postgres;

--
-- Name: jupyter_limits; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.jupyter_limits (
                                       num_of_jobs integer,
                                       cores integer,
                                       ram double precision,
                                       user_type character varying(15),
                                       duration integer,
                                       id integer NOT NULL,
                                       number_of_projects integer,
                                       participants integer
);


ALTER TABLE public.jupyter_limits OWNER TO postgres;

--
-- Name: jupyter_request; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.jupyter_request (
                                        id bigint DEFAULT nextval('public.jupyter_id_seq'::regclass) NOT NULL,
                                        request_id bigint,
                                        description text,
                                        maturity public.maturity_type,
                                        analysis_type character varying(200),
                                        containerized boolean,
                                        num_of_jobs integer,
                                        ram double precision,
                                        cores integer,
                                        additional_resources text
);


ALTER TABLE public.jupyter_request OWNER TO postgres;

--
-- Name: jupyter_request_n; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.jupyter_request_n (
                                          id bigint DEFAULT nextval('public.jupyter_id_seq'::regclass) NOT NULL,
                                          request_id bigint,
                                          description text,
                                          containerized boolean,
                                          ram double precision,
                                          cores integer,
                                          additional_resources text,
                                          image text,
                                          image_id bigint,
                                          participant_view text,
                                          participants_number integer
);


ALTER TABLE public.jupyter_request_n OWNER TO postgres;

--
-- Name: jupyter_server_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.jupyter_server_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.jupyter_server_id_seq OWNER TO postgres;

--
-- Name: jupyter_server; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.jupyter_server (
                                       id bigint DEFAULT nextval('public.jupyter_server_id_seq'::regclass) NOT NULL,
                                       manifest character varying(100),
                                       image text,
                                       project character varying(100),
                                       server_id character varying(20),
                                       created_at timestamp without time zone,
                                       deleted_at timestamp without time zone,
                                       created_by text,
                                       deleted_by text,
                                       project_end_date timestamp without time zone,
                                       url text,
                                       active boolean,
                                       expires_on timestamp without time zone,
                                       state character varying(20),
                                       image_id bigint
);


ALTER TABLE public.jupyter_server OWNER TO postgres;

--
-- Name: machine_compute_limits; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.machine_compute_limits (
                                               id integer NOT NULL,
                                               user_type character varying(15),
                                               number_of_projects integer
);


ALTER TABLE public.machine_compute_limits OWNER TO postgres;

--
-- Name: machine_compute_limits_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.machine_compute_limits_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.machine_compute_limits_id_seq OWNER TO postgres;

--
-- Name: machine_compute_limits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.machine_compute_limits_id_seq OWNED BY public.machine_compute_limits.id;


--
-- Name: machine_compute_request; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.machine_compute_request (
                                                id bigint NOT NULL,
                                                description text,
                                                num_of_vms smallint DEFAULT 1,
                                                num_of_cores smallint,
                                                num_of_ips smallint,
                                                ram double precision,
                                                storage double precision,
                                                request_id bigint,
                                                vm_flavour text,
                                                disk integer,
                                                additional_resources text
);


ALTER TABLE public.machine_compute_request OWNER TO postgres;

--
-- Name: machine_compute_request_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.machine_compute_request_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.machine_compute_request_id_seq OWNER TO postgres;

--
-- Name: machine_compute_request_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.machine_compute_request_id_seq OWNED BY public.machine_compute_request.id;


--
-- Name: migration; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.migration (
                                  version character varying(180) NOT NULL,
                                  apply_time integer
);


ALTER TABLE public.migration OWNER TO postgres;

--
-- Name: notification; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.notification (
                                     id integer NOT NULL,
                                     recipient_id integer NOT NULL,
                                     message text,
                                     seen boolean DEFAULT false,
                                     type integer,
                                     created_at timestamp without time zone,
                                     read_at timestamp without time zone,
                                     url text
);


ALTER TABLE public.notification OWNER TO postgres;

--
-- Name: notification_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.notification_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.notification_id_seq OWNER TO postgres;

--
-- Name: notification_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.notification_id_seq OWNED BY public.notification.id;


--
-- Name: notification_recipient_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.notification_recipient_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.notification_recipient_id_seq OWNER TO postgres;

--
-- Name: notification_recipient_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.notification_recipient_id_seq OWNED BY public.notification.recipient_id;


--
-- Name: ondemand_autoaccept; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ondemand_autoaccept (
                                            num_of_jobs integer,
                                            cores integer,
                                            ram double precision,
                                            user_type character varying(15),
                                            id integer NOT NULL,
                                            autoaccept_number integer
);


ALTER TABLE public.ondemand_autoaccept OWNER TO postgres;

--
-- Name: ondemand_autoaccept_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ondemand_autoaccept_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.ondemand_autoaccept_id_seq OWNER TO postgres;

--
-- Name: ondemand_autoaccept_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ondemand_autoaccept_id_seq OWNED BY public.ondemand_autoaccept.id;


--
-- Name: ondemand_request; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ondemand_request (
                                         id bigint NOT NULL,
                                         request_id bigint,
                                         description text,
                                         maturity public.maturity_type,
                                         analysis_type character varying(200),
                                         containerized boolean,
                                         num_of_jobs integer,
                                         ram double precision,
                                         cores integer,
                                         additional_resources text
);


ALTER TABLE public.ondemand_request OWNER TO postgres;

--
-- Name: ondemand_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ondemand_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.ondemand_id_seq OWNER TO postgres;

--
-- Name: ondemand_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ondemand_id_seq OWNED BY public.ondemand_request.id;


--
-- Name: ondemand_limits; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ondemand_limits (
                                        num_of_jobs integer,
                                        cores integer,
                                        ram double precision,
                                        user_type character varying(15),
                                        duration integer,
                                        id integer NOT NULL,
                                        number_of_projects integer
);


ALTER TABLE public.ondemand_limits OWNER TO postgres;

--
-- Name: ondemand_limits_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ondemand_limits_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.ondemand_limits_id_seq OWNER TO postgres;

--
-- Name: ondemand_limits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ondemand_limits_id_seq OWNED BY public.ondemand_limits.id;


--
-- Name: openstack; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.openstack (
                                  nova_url text,
                                  keystone_url text,
                                  cinder_url text,
                                  neutron_url text,
                                  glance_url text,
                                  tenant_id text,
                                  floating_net_id text,
                                  cred_id text,
                                  cred_secret text,
                                  id integer NOT NULL,
                                  internal_net_id text
);


ALTER TABLE public.openstack OWNER TO postgres;

--
-- Name: openstack_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.openstack_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.openstack_id_seq OWNER TO postgres;

--
-- Name: openstack_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.openstack_id_seq OWNED BY public.openstack.id;


--
-- Name: openstack_machines; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.openstack_machines (
                                           nova_url text,
                                           keystone_url text,
                                           cinder_url text,
                                           neutron_url text,
                                           glance_url text,
                                           tenant_id text,
                                           floating_net_id text,
                                           cred_id text,
                                           cred_secret text,
                                           id integer NOT NULL,
                                           internal_net_id text
);


ALTER TABLE public.openstack_machines OWNER TO postgres;

--
-- Name: pages; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pages (
                              id integer NOT NULL,
                              title text,
                              content text
);


ALTER TABLE public.pages OWNER TO postgres;

--
-- Name: pages_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.pages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.pages_id_seq OWNER TO postgres;

--
-- Name: pages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.pages_id_seq OWNED BY public.pages.id;


--
-- Name: project; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.project (
                                id bigint NOT NULL,
                                name character varying(200),
                                status smallint DEFAULT 0,
                                latest_project_request_id bigint,
                                pending_request_id bigint,
                                project_type smallint,
                                favorite boolean DEFAULT false,
                                start_date timestamp without time zone
);


ALTER TABLE public.project OWNER TO postgres;

--
-- Name: project_request; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.project_request (
                                        id bigint NOT NULL,
                                        name character varying(200),
                                        duration integer,
                                        user_num integer,
                                        user_list integer[],
                                        backup_services boolean,
                                        viewed boolean DEFAULT false,
                                        status smallint DEFAULT 0,
                                        submitted_by integer,
                                        submission_date timestamp without time zone,
                                        assigned_to bigint,
                                        project_type smallint,
                                        project_id bigint,
                                        approval_date timestamp without time zone,
                                        approved_by integer,
                                        deletion_date timestamp without time zone,
                                        end_date date,
                                        additional_resources text,
                                        louros boolean DEFAULT false
);


ALTER TABLE public.project_request OWNER TO postgres;

--
-- Name: project_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.project_id_seq OWNER TO postgres;

--
-- Name: project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.project_id_seq OWNED BY public.project_request.id;


--
-- Name: project_id_seq1; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.project_id_seq1
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.project_id_seq1 OWNER TO postgres;

--
-- Name: project_id_seq1; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.project_id_seq1 OWNED BY public.project.id;


--
-- Name: service_autoaccept; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_autoaccept (
                                           vms integer,
                                           cores integer,
                                           ips integer,
                                           ram double precision,
                                           storage double precision,
                                           user_type character varying(15),
                                           id integer NOT NULL,
                                           autoaccept_number integer
);


ALTER TABLE public.service_autoaccept OWNER TO postgres;

--
-- Name: service_autoaccept_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.service_autoaccept_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.service_autoaccept_id_seq OWNER TO postgres;

--
-- Name: service_autoaccept_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.service_autoaccept_id_seq OWNED BY public.service_autoaccept.id;


--
-- Name: service_limits; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_limits (
                                       vms integer,
                                       cores integer,
                                       ips integer,
                                       ram double precision,
                                       storage double precision,
                                       user_type character varying(15),
                                       duration integer,
                                       id integer NOT NULL,
                                       number_of_projects integer
);


ALTER TABLE public.service_limits OWNER TO postgres;

--
-- Name: service_limits_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.service_limits_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.service_limits_id_seq OWNER TO postgres;

--
-- Name: service_limits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.service_limits_id_seq OWNED BY public.service_limits.id;


--
-- Name: service_request; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_request (
                                        id bigint NOT NULL,
                                        name character varying(200),
                                        version character varying(50),
                                        description text,
                                        url text,
                                        num_of_vms smallint,
                                        num_of_cores smallint,
                                        num_of_ips smallint,
                                        ram double precision,
                                        storage double precision,
                                        request_id bigint NOT NULL,
                                        trl smallint,
                                        vm_flavour text,
                                        disk integer,
                                        additional_resources text
);


ALTER TABLE public.service_request OWNER TO postgres;

--
-- Name: services_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.services_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.services_id_seq OWNER TO postgres;

--
-- Name: services_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.services_id_seq OWNED BY public.service_request.id;


--
-- Name: services_project_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.services_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.services_project_id_seq OWNER TO postgres;

--
-- Name: services_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.services_project_id_seq OWNED BY public.service_request.request_id;


--
-- Name: smtp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.smtp (
                             id integer NOT NULL,
                             encryption text,
                             host text,
                             username text,
                             port text,
                             password text
);


ALTER TABLE public.smtp OWNER TO postgres;

--
-- Name: smtp_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.smtp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.smtp_id_seq OWNER TO postgres;

--
-- Name: smtp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.smtp_id_seq OWNED BY public.smtp.id;


--
-- Name: ticket_body; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ticket_body (
                                    id integer NOT NULL,
                                    id_head integer NOT NULL,
                                    name_user character varying(255),
                                    text text,
                                    client integer DEFAULT 0,
                                    date timestamp(0) without time zone
);


ALTER TABLE public.ticket_body OWNER TO postgres;

--
-- Name: ticket_body_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ticket_body_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.ticket_body_id_seq OWNER TO postgres;

--
-- Name: ticket_body_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ticket_body_id_seq OWNED BY public.ticket_body.id;


--
-- Name: ticket_file; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ticket_file (
                                    id integer NOT NULL,
                                    id_body integer NOT NULL,
                                    "fileName" character varying(255) NOT NULL,
                                    document_name character varying(255)
);


ALTER TABLE public.ticket_file OWNER TO postgres;

--
-- Name: ticket_file_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ticket_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.ticket_file_id_seq OWNER TO postgres;

--
-- Name: ticket_file_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ticket_file_id_seq OWNED BY public.ticket_file.id;


--
-- Name: ticket_head; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ticket_head (
                                    id integer NOT NULL,
                                    user_id integer NOT NULL,
                                    department character varying(255),
                                    topic character varying(255),
                                    status integer DEFAULT 0,
                                    date_update timestamp(0) without time zone DEFAULT NULL::timestamp without time zone,
                                    page text
);


ALTER TABLE public.ticket_head OWNER TO postgres;

--
-- Name: ticket_head_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ticket_head_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.ticket_head_id_seq OWNER TO postgres;

--
-- Name: ticket_head_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ticket_head_id_seq OWNED BY public.ticket_head.id;


--
-- Name: user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."user" (
                               id integer NOT NULL,
                               username character varying(255) NOT NULL,
                               auth_key character varying(32) NOT NULL,
                               password_hash character varying(255) NOT NULL,
                               confirmation_token character varying(255),
                               status integer DEFAULT 1 NOT NULL,
                               superadmin smallint DEFAULT 0,
                               created_at integer NOT NULL,
                               updated_at integer NOT NULL,
                               registration_ip character varying(15),
                               bind_to_ip character varying(255),
                               email character varying(128),
                               email_confirmed smallint DEFAULT 0 NOT NULL,
                               name character varying(100),
                               surname character varying(100)
);


ALTER TABLE public."user" OWNER TO postgres;

--
-- Name: user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.user_id_seq OWNER TO postgres;

--
-- Name: user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_id_seq OWNED BY public."user".id;


--
-- Name: user_visit_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_visit_log (
                                       id integer NOT NULL,
                                       token character varying(255) NOT NULL,
                                       ip character varying(15) NOT NULL,
                                       language character(2) NOT NULL,
                                       user_agent character varying(255) NOT NULL,
                                       user_id integer,
                                       visit_time integer NOT NULL,
                                       browser character varying(30),
                                       os character varying(20)
);


ALTER TABLE public.user_visit_log OWNER TO postgres;

--
-- Name: user_visit_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_visit_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.user_visit_log_id_seq OWNER TO postgres;

--
-- Name: user_visit_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_visit_log_id_seq OWNED BY public.user_visit_log.id;


--
-- Name: vm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.vm (
                           id bigint NOT NULL,
                           ip_address character varying(100),
                           ip_id text,
                           vm_id text,
                           public_key text,
                           image_id text,
                           image_name character varying(100),
                           request_id integer NOT NULL,
                           active boolean,
                           keypair_name character varying(255),
                           created_by integer,
                           deleted_by integer,
                           volume_id text,
                           created_at timestamp without time zone,
                           deleted_at timestamp without time zone,
                           do_not_delete_disk boolean DEFAULT false,
                           windows_unique_id text,
                           read_win_password boolean DEFAULT false,
                           project_id bigint,
                           name character varying(200)
);


ALTER TABLE public.vm OWNER TO postgres;

--
-- Name: vm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.vm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.vm_id_seq OWNER TO postgres;

--
-- Name: vm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.vm_id_seq OWNED BY public.vm.id;


--
-- Name: vm_machines; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.vm_machines (
                                    id bigint NOT NULL,
                                    ip_address character varying(100),
                                    ip_id text,
                                    vm_id text,
                                    public_key text,
                                    image_id text,
                                    image_name character varying(100),
                                    request_id integer,
                                    active boolean,
                                    keypair_name character varying(255),
                                    created_by integer,
                                    deleted_by integer,
                                    volume_id text,
                                    created_at timestamp without time zone,
                                    deleted_at timestamp without time zone,
                                    do_not_delete_disk boolean,
                                    windows_unique_id text,
                                    read_win_password boolean,
                                    project_id bigint,
                                    project_multiple_order integer DEFAULT 1,
                                    name character varying(200)
);


ALTER TABLE public.vm_machines OWNER TO postgres;

--
-- Name: vm_machines_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.vm_machines_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.vm_machines_id_seq OWNER TO postgres;

--
-- Name: vm_machines_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.vm_machines_id_seq OWNED BY public.vm_machines.id;


--
-- Name: analytics id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analytics ALTER COLUMN id SET DEFAULT nextval('public.analytics_id_seq'::regclass);


--
-- Name: cold_storage_autoaccept id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cold_storage_autoaccept ALTER COLUMN id SET DEFAULT nextval('public.cold_storage_autoaccept_id_seq'::regclass);


--
-- Name: cold_storage_limits id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cold_storage_limits ALTER COLUMN id SET DEFAULT nextval('public.cold_storage_limits_id_seq'::regclass);


--
-- Name: cold_storage_request id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cold_storage_request ALTER COLUMN id SET DEFAULT nextval('public.cold_storage_request_id_seq'::regclass);


--
-- Name: cron_job id_cron_job; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cron_job ALTER COLUMN id_cron_job SET DEFAULT nextval('public.cron_job_id_cron_job_seq'::regclass);


--
-- Name: email id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email ALTER COLUMN id SET DEFAULT nextval('public.email_id_seq'::regclass);


--
-- Name: email_events id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_events ALTER COLUMN id SET DEFAULT nextval('public.email_events_id_seq'::regclass);


--
-- Name: email_events_admin id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_events_admin ALTER COLUMN id SET DEFAULT nextval('public.email_events_admin_id_seq'::regclass);


--
-- Name: email_events_moderator id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_events_moderator ALTER COLUMN id SET DEFAULT nextval('public.email_events_moderator_id_seq'::regclass);


--
-- Name: email_events_user id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_events_user ALTER COLUMN id SET DEFAULT nextval('public.email_events_user_id_seq'::regclass);


--
-- Name: hot_volumes id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.hot_volumes ALTER COLUMN id SET DEFAULT nextval('public.hot_volumes_id_seq'::regclass);


--
-- Name: machine_compute_limits id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.machine_compute_limits ALTER COLUMN id SET DEFAULT nextval('public.machine_compute_limits_id_seq'::regclass);


--
-- Name: machine_compute_request id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.machine_compute_request ALTER COLUMN id SET DEFAULT nextval('public.machine_compute_request_id_seq'::regclass);


--
-- Name: notification id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification ALTER COLUMN id SET DEFAULT nextval('public.notification_id_seq'::regclass);


--
-- Name: notification recipient_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification ALTER COLUMN recipient_id SET DEFAULT nextval('public.notification_recipient_id_seq'::regclass);


--
-- Name: ondemand_autoaccept id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ondemand_autoaccept ALTER COLUMN id SET DEFAULT nextval('public.ondemand_autoaccept_id_seq'::regclass);


--
-- Name: ondemand_limits id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ondemand_limits ALTER COLUMN id SET DEFAULT nextval('public.ondemand_limits_id_seq'::regclass);


--
-- Name: ondemand_request id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ondemand_request ALTER COLUMN id SET DEFAULT nextval('public.ondemand_id_seq'::regclass);


--
-- Name: openstack id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.openstack ALTER COLUMN id SET DEFAULT nextval('public.openstack_id_seq'::regclass);


--
-- Name: pages id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pages ALTER COLUMN id SET DEFAULT nextval('public.pages_id_seq'::regclass);


--
-- Name: project id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project ALTER COLUMN id SET DEFAULT nextval('public.project_id_seq1'::regclass);


--
-- Name: project_request id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_request ALTER COLUMN id SET DEFAULT nextval('public.project_id_seq'::regclass);


--
-- Name: service_autoaccept id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_autoaccept ALTER COLUMN id SET DEFAULT nextval('public.service_autoaccept_id_seq'::regclass);


--
-- Name: service_limits id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_limits ALTER COLUMN id SET DEFAULT nextval('public.service_limits_id_seq'::regclass);


--
-- Name: service_request id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_request ALTER COLUMN id SET DEFAULT nextval('public.services_id_seq'::regclass);


--
-- Name: service_request request_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_request ALTER COLUMN request_id SET DEFAULT nextval('public.services_project_id_seq'::regclass);


--
-- Name: smtp id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.smtp ALTER COLUMN id SET DEFAULT nextval('public.smtp_id_seq'::regclass);


--
-- Name: ticket_body id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ticket_body ALTER COLUMN id SET DEFAULT nextval('public.ticket_body_id_seq'::regclass);


--
-- Name: ticket_file id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ticket_file ALTER COLUMN id SET DEFAULT nextval('public.ticket_file_id_seq'::regclass);


--
-- Name: ticket_head id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ticket_head ALTER COLUMN id SET DEFAULT nextval('public.ticket_head_id_seq'::regclass);


--
-- Name: user id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."user" ALTER COLUMN id SET DEFAULT nextval('public.user_id_seq'::regclass);


--
-- Name: user_visit_log id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_visit_log ALTER COLUMN id SET DEFAULT nextval('public.user_visit_log_id_seq'::regclass);


--
-- Name: vm id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vm ALTER COLUMN id SET DEFAULT nextval('public.vm_id_seq'::regclass);


--
-- Name: vm_machines id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vm_machines ALTER COLUMN id SET DEFAULT nextval('public.vm_machines_id_seq'::regclass);


--
-- Data for Name: analytics; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.analytics (id, name, code, opt_out_code) FROM stdin;
1	Matomo	<!-- Matomo -->\r\n<script type="text/javascript">\r\n  var _paq = window._paq = window._paq || [];\r\n  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */\r\n  _paq.push(["setCookieDomain", "*.hypatia.athenarc.gr"]);\r\n  _paq.push(['trackPageView']);\r\n  _paq.push(['enableLinkTracking']);\r\n  (function() {\r\n    var u="https://genomics-lab.fleming.gr/piwik/";\r\n    _paq.push(['setTrackerUrl', u+'matomo.php']);\r\n    _paq.push(['setSiteId', '34']);\r\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\r\n    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);\r\n  })();\r\n</script>\r\n<!-- End Matomo Code -->	<iframe style="border: 0; height: 200px; width: 600px;" \r\nsrc="https://genomics-lab.fleming.gr/piwik/index.php?module=CoreAdminHome&action=optOut&language=en&backgroundColor=&fontColor=&fontSize=&fontFamily="></iframe>
\.


--
-- Data for Name: auth_assignment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_assignment (item_name, user_id, created_at) FROM stdin;
\.


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_item; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_item (name, type, description, rule_name, data, created_at, updated_at, group_code) FROM stdin;
commonPermission	2	Common permission	\N	\N	1557228782	1557228782	\N
/*	3	\N	\N	\N	1557229128	1557229128	\N
Moderator	1	Moderator	\N	\N	1564413889	1564413889	\N
/site/notification-redirect	3	\N	\N	\N	1569420896	1569420896	\N
/project/delete-vm	3	\N	\N	\N	1569420896	1569420896	\N
/project/configure-vm	3	\N	\N	\N	1569420896	1569420896	\N
/ticket-user/*	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-user/open	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-user/index	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-user/view	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-admin/*	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-admin/open	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-admin/delete	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-admin/reopen	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-admin/closed	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-admin/answer	3	\N	\N	\N	1574165003	1574165003	\N
/ticket-admin/index	3	\N	\N	\N	1574165003	1574165003	\N
/site/notification-history	3	\N	\N	\N	1574165003	1574165003	\N
/site/mark-all-notifications-seen	3	\N	\N	\N	1574165003	1574165003	\N
Tickets	2	Tickets	\N	\N	1574165180	1574165180	\N
/site/ssh-tutorial	3	\N	\N	\N	1574355420	1574355420	\N
/project/moderator-options	3	\N	\N	\N	1574355420	1574355420	\N
/project/admin-vm-details	3	\N	\N	\N	1574355420	1574355420	\N
/project/vm-list	3	\N	\N	\N	1574355420	1574355420	\N
/site/mass-notification	3	\N	\N	\N	1576146430	1576146430	\N
/project/edit-project	3	\N	\N	\N	1576146430	1576146430	\N
/project/view-request-user	3	\N	\N	\N	1576146430	1576146430	\N
/project/view-request	3	\N	\N	\N	1576146430	1576146430	\N
/project/retrieve-win-password	3	\N	\N	\N	1596473086	1596473086	\N
/administration/period-statistics	3	\N	\N	\N	1596473087	1596473087	\N
/site/additional-storage-tutorial	3	\N	\N	\N	1606338191	1606338191	\N
/site/help	3	\N	\N	\N	1606338191	1606338191	\N
/user-management/*	3	\N	\N	\N	1557229128	1557229128	\N
Admin	1	Admin	\N	\N	1557229128	1557229128	\N
viewUsers	2	View users	\N	\N	1557229128	1557229128	userManagement
/personal/email-notifications	3	\N	\N	\N	1606338191	1606338191	\N
/administration/view-page	3	\N	\N	\N	1606338191	1606338191	\N
/administration/delete-page	3	\N	\N	\N	1606338191	1606338191	\N
createUsers	2	Create users	\N	\N	1557229128	1557229128	userManagement
/administration/edit-page	3	\N	\N	\N	1606338191	1606338191	\N
editUsers	2	Edit users	\N	\N	1557229128	1557229128	userManagement
/administration/add-page	3	\N	\N	\N	1606338191	1606338191	\N
/administration/manage-pages	3	\N	\N	\N	1606338191	1606338191	\N
deleteUsers	2	Delete users	\N	\N	1557229128	1557229128	userManagement
changeUserPassword	2	Change user password	\N	\N	1557229128	1557229128	userManagement
assignRolesToUsers	2	Assign roles to users	\N	\N	1557229128	1557229128	userManagement
viewVisitLog	2	View visit log	\N	\N	1557229128	1557229128	userManagement
viewUserRoles	2	View user roles	\N	\N	1557229128	1557229128	userManagement
viewRegistrationIp	2	View registration IP	\N	\N	1557229128	1557229128	userManagement
viewUserEmail	2	View user email	\N	\N	1557229128	1557229128	userManagement
editUserEmail	2	Edit user email	\N	\N	1557229128	1557229128	userManagement
bindUserToIp	2	Bind user to IP	\N	\N	1557229128	1557229128	userManagement
changeOwnPassword	2	Change own password	\N	\N	1557229128	1557229128	userCommonPermissions
/site/*	3	\N	\N	\N	1558695988	1558695988	\N
/site/about	3	\N	\N	\N	1558695988	1558695988	\N
/site/contact	3	\N	\N	\N	1558695988	1558695988	\N
/site/logout	3	\N	\N	\N	1558695988	1558695988	\N
/site/index	3	\N	\N	\N	1558695988	1558695988	\N
/site/captcha	3	\N	\N	\N	1558695988	1558695988	\N
/site/error	3	\N	\N	\N	1558695988	1558695988	\N
/personal/*	3	\N	\N	\N	1558695988	1558695988	\N
/personal/superadmin-actions	3	\N	\N	\N	1558695988	1558695988	\N
/personal/index	3	\N	\N	\N	1558695988	1558695988	\N
/personal/captcha	3	\N	\N	\N	1558695988	1558695988	\N
/personal/error	3	\N	\N	\N	1558695988	1558695988	\N
UserCommonPermission	2	AllPermissions	\N	\N	1558695892	1558697712	\N
ModerateRequests	2	ModerateRequests	\N	\N	1564413991	1564413991	userCommonPermissions
Notifications	2	Notifications	\N	\N	1574165129	1574165129	\N
VMManagement	2	VMManagement	\N	\N	1574165350	1574165350	\N
VMAdministration	2	VMAdministration	\N	\N	1574356140	1574356140	\N
/project/cancel-project	3	\N	\N	\N	1576670576	1576670576	\N
/project/cancel-request	3	\N	\N	\N	1576670576	1576670576	\N
/project/modify-request	3	\N	\N	\N	1576670576	1576670576	\N
/personal/user-options	3	\N	\N	\N	1576670576	1576670576	\N
/project/moderator-email-notifications	3	\N	\N	\N	1605607472	1605607472	\N
/administration/test-smtp-configuration	3	\N	\N	\N	1605607472	1605607472	\N
/administration/email-notifications	3	\N	\N	\N	1605607472	1605607472	\N
/project/*	3	\N	\N	\N	1559285975	1559285975	\N
/project/reject	3	\N	\N	\N	1559285975	1559285975	\N
/project/approve	3	\N	\N	\N	1559285975	1559285975	\N
/project/user-request-list	3	\N	\N	\N	1559285975	1559285975	\N
/project/request-list	3	\N	\N	\N	1559285975	1559285975	\N
/project/auto-complete-names	3	\N	\N	\N	1559285975	1559285975	\N
/project/new-ondemand-request	3	\N	\N	\N	1559285975	1559285975	\N
/project/new-cold-storage-request	3	\N	\N	\N	1559285975	1559285975	\N
/project/new-service-request	3	\N	\N	\N	1559285975	1559285975	\N
/project/index	3	\N	\N	\N	1559285975	1559285975	\N
/project/captcha	3	\N	\N	\N	1559285975	1559285975	\N
/project/error	3	\N	\N	\N	1559285975	1559285975	\N
/administration/*	3	\N	\N	\N	1559285975	1559285975	\N
/administration/administration	3	\N	\N	\N	1559285975	1559285975	\N
/administration/configure	3	\N	\N	\N	1559285975	1559285975	\N
/administration/index	3	\N	\N	\N	1559285975	1559285975	\N
/administration/captcha	3	\N	\N	\N	1559285975	1559285975	\N
/administration/error	3	\N	\N	\N	1559285975	1559285975	\N
Requests	2	Requests	\N	\N	1560851650	1560851650	userCommonPermissions
/project/new-request	3	\N	\N	\N	1560861542	1560861542	\N
/site/privacy	3	\N	\N	\N	1562928963	1562928963	\N
/site/under-construction	3	\N	\N	\N	1562928963	1562928963	\N
/site/auth-confirmed	3	\N	\N	\N	1562928963	1562928963	\N
/api/*	3	\N	\N	\N	1562928963	1562928963	\N
/api/active-ondemand-quotas	3	\N	\N	\N	1562928963	1562928963	\N
/api/active-projects	3	\N	\N	\N	1562928963	1562928963	\N
/api/captcha	3	\N	\N	\N	1562928963	1562928963	\N
/api/error	3	\N	\N	\N	1562928963	1562928963	\N
Silver	1	Silver	\N	\N	1562929112	1562929112	\N
Gold	1	Gold	\N	\N	1562929225	1562929225	\N
/api/ondemand-project-quotas	3	\N	\N	\N	1563876901	1563876901	\N
/administration/all-projects	3	\N	\N	\N	1618407752	1618407752	\N
/project/new-machine-compute-request	3	\N	\N	\N	1618409946	1618409946	\N
/project/machine-compute-configure-vm	3	\N	\N	\N	1618481407	1618481407	\N
Bronze	1	Bronze	\N	\N	1560851578	1620825330	\N
/project/detach-volume-from-vm	3	\N	\N	\N	1623263700	1623263700	\N
/project/delete-volume	3	\N	\N	\N	1623263700	1623263700	\N
/project/storage-volumes	3	\N	\N	\N	1623263700	1623263700	\N
/project/admin-vm-machines-details	3	\N	\N	\N	1623263700	1623263700	\N
/project/vm-machines-list	3	\N	\N	\N	1623263700	1623263700	\N
/project/delete-vm-machines	3	\N	\N	\N	1623263700	1623263700	\N
/project/remove-favorite	3	\N	\N	\N	1623263700	1623263700	\N
/project/make-favorite	3	\N	\N	\N	1623263700	1623263700	\N
/project/machine-compute-access-project	3	\N	\N	\N	1632823739	1632823739	\N
/project/reboot-vm	3	\N	\N	\N	1633546862	1633546862	\N
/project/stop-vm	3	\N	\N	\N	1633546862	1633546862	\N
/project/start-vm	3	\N	\N	\N	1633546862	1633546862	\N
/project/get-vm-status	3	\N	\N	\N	1633546862	1633546862	\N
/project/reboot-vm-machines	3	\N	\N	\N	1636384138	1636384138	\N
/project/stop-vm-machines	3	\N	\N	\N	1636384138	1636384138	\N
/project/start-vm-machines	3	\N	\N	\N	1636384138	1636384138	\N
/project/get-vm-machines-status	3	\N	\N	\N	1636384138	1636384138	\N
/project/manage-volumes	3	\N	\N	\N	1643374931	1643374931	\N
/project/create-volume	3	\N	\N	\N	1643374931	1643374931	\N
/administration/delete-analytics	3	\N	\N	\N	1643374931	1643374931	\N
/administration/edit-analytics	3	\N	\N	\N	1643374931	1643374931	\N
/administration/add-analytics	3	\N	\N	\N	1643374931	1643374931	\N
/administration/manage-analytics	3	\N	\N	\N	1643374931	1643374931	\N
/administration/reactivate	3	\N	\N	\N	1645002590	1645002590	\N
/administration/storage-volumes	3	\N	\N	\N	1645002590	1645002590	\N
/project/user-statistics	3	\N	\N	\N	1651147385	1651147385	\N
/api/all-ondemand-quotas	3	\N	\N	\N	1651147385	1651147385	\N
/administration/user-stats-list	3	\N	\N	\N	1651147385	1651147385	\N
/administration/user-statistics	3	\N	\N	\N	1651147385	1651147385	\N
/ticket-user/upgrade	3	\N	\N	\N	1684931223	1684931223	\N
/site/health	3	\N	\N	\N	1684931223	1684931223	\N
/gii/*	3	\N	\N	\N	1684931223	1684931223	\N
/gii/default/*	3	\N	\N	\N	1684931223	1684931223	\N
/gii/default/action	3	\N	\N	\N	1684931223	1684931223	\N
/gii/default/diff	3	\N	\N	\N	1684931223	1684931223	\N
/gii/default/preview	3	\N	\N	\N	1684931223	1684931223	\N
/gii/default/view	3	\N	\N	\N	1684931223	1684931223	\N
/gii/default/index	3	\N	\N	\N	1684931223	1684931223	\N
/debug/*	3	\N	\N	\N	1684931223	1684931223	\N
/debug/user/*	3	\N	\N	\N	1684931223	1684931223	\N
/debug/user/reset-identity	3	\N	\N	\N	1684931223	1684931223	\N
/debug/user/set-identity	3	\N	\N	\N	1684931223	1684931223	\N
/debug/default/*	3	\N	\N	\N	1684931223	1684931223	\N
/debug/default/download-mail	3	\N	\N	\N	1684931223	1684931223	\N
/debug/default/toolbar	3	\N	\N	\N	1684931223	1684931223	\N
/debug/default/view	3	\N	\N	\N	1684931223	1684931223	\N
/debug/default/index	3	\N	\N	\N	1684931223	1684931223	\N
/debug/default/db-explain	3	\N	\N	\N	1684931223	1684931223	\N
/project/jupyter-start-server	3	\N	\N	\N	1692101954	1692101954	\N
/project/jupyter-index	3	\N	\N	\N	1692101954	1692101954	\N
/project/new-jupyter-request	3	\N	\N	\N	1692101954	1692101954	\N
/personal/email-verification	3	\N	\N	\N	1692101954	1692101954	\N
/project/jupyter-stop-server	3	\N	\N	\N	1695037626	1695037626	\N
/project/delete-user	3	\N	\N	\N	1695037626	1695037626	\N
/project/new-jupyter-request-new	3	\N	\N	\N	1695037626	1695037626	\N
/project/stop-expired-jupyter-servers	3	\N	\N	\N	1705399772	1705399772	\N
/personal/email-verified	3	\N	\N	\N	1705399772	1705399772	\N
/personal/email-verification-sent	3	\N	\N	\N	1705399772	1705399772	\N
/administration/view-active-jupyters	3	\N	\N	\N	1705399772	1705399772	\N
\.


--
-- Data for Name: auth_item_child; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_item_child (parent, child) FROM stdin;
\.


--
-- Data for Name: auth_item_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_item_group (code, name, created_at, updated_at) FROM stdin;
userManagement	User management	1557229128	1557229128
userCommonPermissions	User common permission	1557229128	1557229128
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
\.


--
-- Data for Name: auth_rule; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_rule (name, data, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Data for Name: cold_storage_autoaccept; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cold_storage_autoaccept (storage, user_type, id, autoaccept_number) FROM stdin;
2048	gold	2	3
30	bronze	6	1
250	silver	4	3
\.


--
-- Data for Name: cold_storage_limits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cold_storage_limits (storage, user_type, duration, id, number_of_projects) FROM stdin;
500	silver	360	4	10
10240	gold	720	2	10
30	bronze	180	6	10
\.


--
-- Data for Name: cold_storage_request; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cold_storage_request (id, request_id, storage, description, additional_resources, type, vm_type, num_of_volumes) FROM stdin;
\.


--
-- Data for Name: configuration; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.configuration (reviewer_num, home_page, privacy_page, help_page, schema_url) FROM stdin;
0	1	3	4	https://hypatia-comp.athenarc.gr
\.


--
-- Data for Name: cron_job; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cron_job (id_cron_job, controller, action, "limit", "offset", running, success, started_at, ended_at, last_execution_time) FROM stdin;
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2023-01-10 15:49:13.527328+02
2	auth	0001_initial	2023-01-10 15:49:15.245225+02
3	admin	0001_initial	2023-01-10 15:49:15.744698+02
4	admin	0002_logentry_remove_auto_add	2023-01-10 15:49:15.816557+02
5	admin	0003_logentry_add_action_flag_choices	2023-01-10 15:49:15.862712+02
6	contenttypes	0002_remove_content_type_name	2023-01-10 15:49:15.905119+02
7	auth	0002_alter_permission_name_max_length	2023-01-10 15:49:15.947963+02
8	auth	0003_alter_user_email_max_length	2023-01-10 15:49:15.991047+02
9	auth	0004_alter_user_username_opts	2023-01-10 15:49:16.02983+02
10	auth	0005_alter_user_last_login_null	2023-01-10 15:49:16.090649+02
11	auth	0006_require_contenttypes_0002	2023-01-10 15:49:16.136994+02
12	auth	0007_alter_validators_add_error_messages	2023-01-10 15:49:16.173581+02
13	auth	0008_alter_user_username_max_length	2023-01-10 15:49:16.346778+02
14	auth	0009_alter_user_last_name_max_length	2023-01-10 15:49:16.385415+02
15	auth	0010_alter_group_name_max_length	2023-01-10 15:49:16.437456+02
16	auth	0011_update_proxy_permissions	2023-01-10 15:49:16.472185+02
17	auth	0012_alter_user_first_name_max_length	2023-01-10 15:49:16.516301+02
18	sessions	0001_initial	2023-01-10 15:49:16.968156+02
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
\.


--
-- Data for Name: email; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.email (id, recipient_ids, type, sent_at, message, project_id) FROM stdin;
\.


--
-- Data for Name: email_events; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.email_events (id, user_id, user_creation, new_project, project_decision, new_ticket, expires_30, expires_15, edit_project, expires_1, expires_5) FROM stdin;
\.


--
-- Data for Name: email_events_admin; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.email_events_admin (id, user_id, user_creation, new_ticket, expires_1, expires_5) FROM stdin;
\.


--
-- Data for Name: email_events_moderator; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.email_events_moderator (id, user_id, new_project, expires_30, expires_15, expires_1, expires_5, project_decision, edit_project) FROM stdin;
\.


--
-- Data for Name: email_events_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.email_events_user (id, user_id, project_decision, expires_1, expires_5, expires_30, expires_15) FROM stdin;
\.


--
-- Data for Name: email_verification; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.email_verification (id, verification_token, user_id, created_at, email, expiry, status) FROM stdin;
\.


--
-- Data for Name: hot_volumes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.hot_volumes (id, name, project_id, volume_id, mountpoint, accepted_at, vm_type, active, deleted_at, deleted_by, vm_id, created_at, mult_order) FROM stdin;
\.


--
-- Data for Name: jupyter_autoaccept; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.jupyter_autoaccept (num_of_jobs, cores, ram, user_type, id, autoaccept_number) FROM stdin;
1000	16	32	silver	4	3
5000	95	64	gold	2	3
5000	2	16	bronze	6	1
\.


--
-- Data for Name: jupyter_images; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.jupyter_images (id, description, image, gpu) FROM stdin;
1	Base notebook	jupyter/base-notebook:latest	f
2	Minimal notebook	jupyter/minimal-notebook:latest	f
3	R notebook	jupyter/r-notebook:latest	f
4	SciPy notebook	jupyter/scipy-notebook:latest	f
5	Tensorflow notebook	jupyter/tensorflow-notebook:latest	f
6	Data Science notebook	jupyter/datascience-notebook:latest	f
7	PySpark notebook	jupyter/pyspark-notebook:latest	f
8	AllSpark notebook	jupyter/all-spark-notebook:latest	f
9	AllSpark notebook-python 3.8	jupyter/all-spark-notebook:python-3.8.8	f
11	Data Science notebook	jupyter/datascience-notebook:latest	t
12	Tensorflow notebook	jupyter/tensorflow-notebook:latest	t
13	Jupyter perl image	zagganas/perl-jupyter:latest	f
14	Jupyter Trinity image	zagganas/trinity-jupyter:latest	f
\.


--
-- Data for Name: jupyter_limits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.jupyter_limits (num_of_jobs, cores, ram, user_type, duration, id, number_of_projects, participants) FROM stdin;
5000	95	64	gold	120	2	10	40
5000	2	16	bronze	14	6	10	1
1000	16	32	silver	30	4	10	20
\.


--
-- Data for Name: jupyter_request; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.jupyter_request (id, request_id, description, maturity, analysis_type, containerized, num_of_jobs, ram, cores, additional_resources) FROM stdin;
\.


--
-- Data for Name: jupyter_request_n; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.jupyter_request_n (id, request_id, description, containerized, ram, cores, additional_resources, image, image_id, participant_view, participants_number) FROM stdin;
\.


--
-- Data for Name: jupyter_server; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.jupyter_server (id, manifest, image, project, server_id, created_at, deleted_at, created_by, deleted_by, project_end_date, url, active, expires_on, state, image_id) FROM stdin;
\.


--
-- Data for Name: machine_compute_limits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.machine_compute_limits (id, user_type, number_of_projects) FROM stdin;
3	gold	-1
1	bronze	0
2	silver	0
\.


--
-- Data for Name: machine_compute_request; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.machine_compute_request (id, description, num_of_vms, num_of_cores, num_of_ips, ram, storage, request_id, vm_flavour, disk, additional_resources) FROM stdin;
\.


--
-- Data for Name: migration; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.migration (version, apply_time) FROM stdin;
m000000_000000_base	1557228779
m140608_173539_create_user_table	1557228782
m140611_133903_init_rbac	1557228782
m140808_073114_create_auth_item_group_table	1557228782
m140809_072112_insert_superadmin_to_user	1557228782
m140809_073114_insert_common_permisison_to_auth_item	1557228782
m141023_141535_create_user_visit_log	1557228782
m141116_115804_add_bind_to_ip_and_registration_ip_to_user	1557228782
m141121_194858_split_browser_and_os_column	1557228782
m141201_220516_add_email_and_email_confirmed_to_user	1557228783
m141207_001649_create_basic_user_permissions	1557229128
m151008_162401_create_notification_table	1568039970
m160509_211405_add_flashed_to_notification	1568039970
m160921_171124_alter_notification_table	1568039970
m160618_215837_create_ticket_head_table	1569933145
m160618_222004_create_ticket_body_table	1569933145
m160719_002353_create_ticket_file_table	1569933145
m170408_074642_new_column_document_name_table_ticket_file	1569933145
m150927_060316_cronjob_init	1607421658
m241021_063651_insert_user	1729492671
\.


--
-- Data for Name: notification; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.notification (id, recipient_id, message, seen, type, created_at, read_at, url) FROM stdin;
4018	215	Project 'grgrgr' has been automatically approved.	f	2	2024-10-11 13:45:25.26047	\N	/index.php?r=project%2Fuser-request-list&filter=auto-approved
4019	215	Updates to project 'grgrgr' have been automatically approved.	f	2	2024-10-21 09:11:33.318434	\N	/index.php?r=project%2Fuser-request-list&filter=auto-approved
4017	215	Project 'test-storage' has been automatically approved.	t	2	2024-10-11 13:29:46.638539	2024-10-21 09:18:36.458834	/index.php?r=project%2Fuser-request-list&filter=auto-approved
4020	215	Project 'test-storagey5y5y' has been automatically approved.	f	2	2024-10-21 09:19:34.087306	\N	/index.php?r=project%2Fuser-request-list&filter=auto-approved
4021	215	We are happy to inform you that your project 'test-storagey5y5y' has been approved. <br /> You can access the project resources via the Hypatia website	f	2	2024-10-21 09:32:04.850442	\N	/index.php?r=project%2Fuser-request-list&filter=approved
\.


--
-- Data for Name: ondemand_autoaccept; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ondemand_autoaccept (num_of_jobs, cores, ram, user_type, id, autoaccept_number) FROM stdin;
1000	16	64	silver	4	3
5000	95	980	gold	2	3
500	2	16	bronze	6	1
\.


--
-- Data for Name: ondemand_limits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ondemand_limits (num_of_jobs, cores, ram, user_type, duration, id, number_of_projects) FROM stdin;
500	2	16	bronze	180	6	10
1000	16	64	silver	360	4	10
5000	95	980	gold	720	2	10
\.


--
-- Data for Name: ondemand_request; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ondemand_request (id, request_id, description, maturity, analysis_type, containerized, num_of_jobs, ram, cores, additional_resources) FROM stdin;
\.


--
-- Data for Name: openstack; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.openstack (nova_url, keystone_url, cinder_url, neutron_url, glance_url, tenant_id, floating_net_id, cred_id, cred_secret, id, internal_net_id) FROM stdin;
https://nova.elixir.grnet.gr:8774/v2.1	https://keystone.elixir.grnet.gr:5000/v3	https://cinder.elixir.grnet.gr:8776/v3	https://neutron.elixir.grnet.gr:9696/v2.0	https://glance.elixir.grnet.gr:9292/v2	YzRlNzUyMTU5NDRhNDM0YzgxYmE1NWNkYjRiYjZkZDg=	NGU3MjNlYTItOTQ2ZS00Y2VlLTgzNmMtYjU2NDUyMTNjZWI3	NzU0N2U0NWExMTk2NDIzYzk4ZDhlNWM4NmMzNTU5ODE=	RVY1dXlWWS16RFdtS2ZMdjVaZVdzVW5aaXRPQ0VvTk9tdC1ucGNrdWMwVGxUakV6cVdTckg1NXdaekgtQzdsZUNFQm5ka18xT0FGMVFvZlBodVh2Q0E=	1	YmVlYjQ2ZjUtZmUxMy00MDI5LWE3YmEtZDYwMWZiNGVjOTU4
\.


--
-- Data for Name: openstack_machines; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.openstack_machines (nova_url, keystone_url, cinder_url, neutron_url, glance_url, tenant_id, floating_net_id, cred_id, cred_secret, id, internal_net_id) FROM stdin;
https://nova.elixir.grnet.gr:8774/v2.1	https://keystone.elixir.grnet.gr:5000/v3	https://cinder.elixir.grnet.gr:8776/v3	https://neutron.elixir.grnet.gr:9696/v2.0	https://glance.elixir.grnet.gr:9292/v2	YzRlNzUyMTU5NDRhNDM0YzgxYmE1NWNkYjRiYjZkZDg=	NGU3MjNlYTItOTQ2ZS00Y2VlLTgzNmMtYjU2NDUyMTNjZWI3	NzU0N2U0NWExMTk2NDIzYzk4ZDhlNWM4NmMzNTU5ODE=	RVY1dXlWWS16RFdtS2ZMdjVaZVdzVW5aaXRPQ0VvTk9tdC1ucGNrdWMwVGxUakV6cVdTckg1NXdaekgtQzdsZUNFQm5ka18xT0FGMVFvZlBodVh2Q0E=	1	YmVlYjQ2ZjUtZmUxMy00MDI5LWE3YmEtZDYwMWZiNGVjOTU4
\.


--
-- Data for Name: pages; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.pages (id, title, content) FROM stdin;
3	Privacy policy	<div class="site-about">\r\n    <h1>Privacy statement</h1>\r\n    \r\n\t<h3>What Are Cookies?</h3>\r\n\r\n\tCookies are small text files placed on your computer, phone, or other device when you visit websites and are used to record information about your activity, including the pages you view, the content you listen to, ads you click on, your settings, and other actions you take on the Service.\r\n\r\n\tCookies can be “persistent” or “session” cookies. Persistent cookies stay on your device for a set period of time or until you delete them, while session cookies are deleted once you close your web browser.\r\n\r\n\t<h3>Use of Cookies</h3>\r\n\r\n\tLike most organisations, when you visit or interact with the Service, we and our service providers may use cookies for storing information about login sessions, to help provide, protect and improve the Service. In line with Article 5(3) of the ePrivacy Directive, consent is not required for technical storage or access of authentication cookies, for the duration of a session.\r\n\r\n\t<h3>Other Information we collect, store and record</h3>\r\n\t<ul>\r\n\t\t<li><b>User execution history data:</b> we collect these data in order to keep track of resource consumption and to provide the user with statistics about their use of the platform.</li>\r\n\t\t<li><b>Form data for resource allocation requests:</b> we collect these data through forms which are made available from our website and are held on our own servers. These include personal information to identify and register a user, such as their email address. These data are used in order to decide the kind of access and amount of resources we are going to grant to the user, as well as in order to improve the service we are providing to the specific user in accordance to the Terms of Service. </li>\r\n    </ul>\r\n    \r\n\r\n\r\n\t<h3>Data Storage and Retention</h3>\r\n\r\n\tAll data collected through our services, either through cookies or through forms and user input, are stored on our servers for the duration of the service provision.\r\n\r\n\t<h3>User Rights</h3>\r\n\r\n\tUsers whose data we process in order to provide the necessary services have the following rights:\r\n\t<ol>\r\n    \t<li>The right to be informed regarding the objectives of processing, their lawful basis, the data retention period and who the data will be shared with. This information is included in this policy, however, the user may request additional information.</li>\r\n    \t<li>The right of access to the data we collect, process and retain.</li>\r\n    \t<li>The right to rectification to correct any inaccurate personal data we may hold.</li>\r\n    \t<li>The right to erasure to erase data after the data subject has stopped received our services.</li>\r\n    \t<li>The right to restrict processing in case this is beyond the scope of the processing objective or its lawful basis.</li>\r\n    \t<li>The right to object in case there is a basis for such a request.</li>\r\n\t\t</ol>\r\n\r\n\tThe user may exercise her rights by emailing us at dpo@imis.athena-innovation.gr.\r\n\r\n\tARC reserves the right to charge for the transaction costs of responding to the user’s requests.\r\n\r\n\r\n\t<h3>Privacy and Personal Data Settings</h3>\r\n\r\n\t<a href="https://www.athena-innovation.gr/en/identity">Athena Research Centre</a> is the Data controller for processing the data collected by you when you sign up and when you use our services, username. Data will be stored as long as the service is in use and they will not be used for other purposes nor given to third parties. Athena RC uses data security technologies to prevent any unauthorised access to data and guarantee data confidentiality. You have always the right to access, modify, erase and ask not to be the object of a decision based solely on automated processing including profiling. For this and for any further question you may have, please contact <a href="mailto:dpo@athena-innovation.gr">dpo@athena-innovation.gr</a>.\r\n\r\n    \r\n</div>
1	Home page	    <div class="row">&nbsp;</div>\r\n    <div class="row">\r\n        <div class='col-md-12'>\r\n            <h2>About Hypatia</h2>\r\n            HYPATIA is the Cloud infrastructure that has been developed to support the computational needs of the  <a href="https://elixir-greece.org/" target="_blank">ELIXIR-GR community</a>, but also the broader community of life scientists in Greece and abroad. It currently hosts important ELIXIR-GR services and resources (e.g., the <a href="https://covid19dataportal.gr/" target="_blank"> national COVID19 Data Portal of Greece</a>), while it undertakes computational tasks in the context of various projects of ELIXIR-GR members.\r\n<br /><br />\r\n\r\nThe infrastructure is named after <a href="https://en.wikipedia.org/wiki/Hypatia" target="_blank"> Hypatia (Υπατία)</a>, a Greek philosopher, astronomer, and mathematician, who lived in Alexandria, Egypt (born circa 350-370AD; died in 415AD). \r\n\r\n<br /><br />\r\n\r\nUnder the hood, HYPATIA consists of a powerful computational cluster of heterogeneous physical machines. Currently, the HYPATIA’s cluster is comprised of:<br>\r\n            <ul class="square-list">\r\n                <li><strong>32 basic nodes:</strong> (2 CPUs, 14 cores/CPU, 512GB DDR4 RAM).</li>\r\n                <li><strong>2 hefty nodes:</strong> (2 CPUs, 24 cores/CPU, 1TB DDR4 RAM)</li>\r\n                <li><strong>3 GPU nodes:</strong> (2 CPUs, 14 cores/CPU, 768GB DDR4 RAM, 2 GPUs)</li>\r\n                <li><strong>8 I/O nodes:</strong> (2 CPUs, 14 cores/CPU, 512GB DDR4 RAM, 2x2TB SSD 6G)</li>\r\n                <li><strong>9 infrastructure nodes:</strong>(2 CPUs, 14 cores/CPU, 192GB DDR4 RAM)</li>\r\n            </ul>\r\n        </div>\r\n                </div>\r\n         <div class="row">\r\n        <div class="col-md-12 text-center"><img class="index-img" src="/img/site/about.png" alt="" width="70%"></div> \r\n        </div>\r\n        <div class="row">&nbsp;</div>\r\n    <div class="row">\r\n        \r\n        <div class='col-md-12'>\r\n                         HYPATIA has been funded by the “ELIXIR-GR: Managing and Analysing Life Sciences Data (MIS: 5002780)” project (co-funded by Greece and the European Union - European Regional Development Fund) and it is currently hosted by a <a href="https://grnet.gr/en/" target="_blank">GRNET’s</a> data center, located in Athens, Greece. \r\n                </div>\r\n         </div>\r\n<div class="row">&nbsp;</div>\r\n<div class="row">\r\n        \r\n        <div class='col-md-12'>\r\n            <h2>How can I use the HYPATIA?</h2>\r\n            HYPATIA’s computational resources are allocated for predetermined time periods to particular user-created projects. HYPATIA’s users are able to submit                  project requests through a dedicated Web interface, which is based on <a href="https://github.com/athenarc/clima" target="_blank">CLIMA</a>, an open source platform for the allocation of resources on Clouds. Project requests are examined by a dedicated committee that decides about their acceptance, modification, or rejection. \r\n                </div>\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n<div class="row">\r\n<div class="col-md-12 text-center"><img class="index-img" src="/img/site/use.png" alt="" width="70%"></div>      \r\n</div>\r\n\r\n<div class="row">&nbsp;</div>\r\n<div class="row">\r\n        <div class="col-md-12">\r\n        Authentication in HYPATIA is done leveraging ELIXIR-AAI technologies. This means that anyone with an active <a href="https://elixir-europe.org/services/compute/aai" target="_blank">ELIXIR-AAI</a> account is able to connect. The following user types are currently provided by HYPATIA: <br>\r\n<ul class="square-list">\r\n<li><strong>Bronze user</strong>: The default type of user, having the less privileges and most limitations. This type is given for testing or educational purposes during training events. </li>\r\n<li><strong>Silver user</strong>: Suitable type of user for regular lab members (upgrade upon request).</li>\r\n<li><strong>Gold user</strong>: Suitable type of user for ELIXIR-GR’s Principal Investigators (upgrade upon request). </li>\r\n</ul>\r\n\r\n<br /> <br />\r\nCurrently, users are able to make requests for the following types of projects:<br>\r\n<ul class="square-list">\r\n<li><strong>“24/7 services” projects</strong>: Offer VMs to host 24/7 services with relatively lightweight demands (e.g., Web servers, API endpoints, databases).</li>\r\n<li><strong>“On-demand batch computations” projects</strong>: Offer resources to be allocated for batches of computational tasks (in the context of containerised <a href="https://www.commonwl.org/" target="_blank">CWL</a>-described workflows). </li> \r\n<li><strong>“On-demand computation machines” projects</strong>: Offer VMs to undertake short-term, computational-intensive experiments. </li>\r\n<li><strong>“Storage volumes” projects</strong>: Offer storage volumes that can be attached to VMs that belong to “24/7 services” or “On-demand computation machines” projects. Plans to provide cold-storage in the future.</li>\r\n</ul>\r\n       </div>\r\n</div>\r\n\r\n    <div class="row">&nbsp;</div>\r\n\r\n    <div class="row">\r\n        <div class='col-md-12'>\r\n            <h2>How can I sign-in to the resource management system?</h2>\r\n            <ul class="square-list">\r\n                <li>To sign-in to the resource management system an ELIXIR-AAI account is required (just click on the “Register” button <a href="https://hypatia.athenarc.gr/index.php?r=user-management%2Fauth%2Flogin">here</a>) and wait for an approval email).</li>\r\n                <li>When your your ELIXIR-AAI account is ready, you can just sign-in using your credentials (click “Login” <a href="https://hypatia.athenarc.gr/index.php?r=user-management%2Fauth%2Flogin">here</a>).</li>\r\n                <li>During the previous steps you have to give your consent that ELIXIR-AAI and HYPATIA’s resource management system will have access to basic account information required for the flawless operation of the system.</li> \r\n            </ul>\r\n            Learn <a href="https://elixir-europe.org/services/compute/aai" target="_blank">more</a> about the ELIXIR-AAI.\r\n        </div>\r\n        </div>\r\n        <div class="row">\r\n        <div class="col-md-12 text-center"><img class="index-img" src="/img/site/index-unsplash-3.jpg" alt="" width="70%"></div>\r\n    </div>\r\n</div>
4	Help page	<link href="/css/site/under_construction.css" rel="stylesheet"><div class='title row'>\r\n\r\n<div class="col-md-offset-11 col-md-1 float-right">\r\n    <a class="btn btn-default" href="index.php?r=project%2Findex"><i class="fas fa-arrow-left"></i> Back</a>   </div>\r\n</div>\r\n\r\n<div class="row" id="back">&nbsp;</div><br><br>\r\n<h1>How to connect</h1>\r\n<a href="#hypatia-use">Who can use HYPATIA?</a><br>\r\n<a href="#aai-what">What is the ELIXIR AAI?</a><br>\r\n<a href="#aai-account">How do I create an ELIXIR AAI account?</a><br>\r\n<a href="#aai-login">How do I login to HYPATIA using my newly created ELIXIR AAI account?</a><br>\r\n<a href="#data">What data do you keep in the HYPATIA database regarding my ELIXIR AAI Account?</a><br>\r\n<a href="#passw">What happens if I forget my password?</a><br>\r\n<h1>HYPATIA</h1>\r\n<a href="#users">What are the available user types in HYPATIA?</a><br>\r\n<a  href="#project-types">What project types exist in HYPATIA?</a><br>\r\n<a href="#new-proj">How do I create a new project?</a><br>\r\n<a href="#24/7">How do I create a new “24/7 services” project?</a><br>\r\n<a href="#ondemand">How do I create a new “On-demand batch computations” project?</a><br>\r\n<a href="#machine">How do I create a new “On-demand computation machines” project (available only to gold users)?</h2><br>\r\n<a href="#storage">How do I create a new “Storage volume” project?</a><br>\r\n<a href="#request">What happens after I submit a project request?</a><br>\r\n<a href="#notif"> Why did I get a notification saying my project was automatically accepted?</a><br>\r\n<a href="#expire">What happens when my project is close to the expiration date?</a><br>\r\n<a href="#email"> How do I get notifications by e-mail instead of only on the interface?</a><br>\r\n<a href="#list">Is there a list of all my previous requests?</a><br>\r\n <a href="#update">How do I update my projects?</a><br>\r\n<a href="#forget">I forgot to update my project expiration date and it expired. What can I do?</a><br>\r\n<a href="#details">How do I view details about my projects?</a><br>\r\n<a href ="#access">My project was approved. How do I access the resources?</a><br>\r\n <a href="#vm">How do I create a VM (24/7 services, on-demand computation machines)?</a><br>\r\n<a href="#connection"> What are the connection details for my VM? </a><br>\r\n<a href="#start">Can I stop/start or reboot my VM?</a><br>\r\n<a  href="#start">Can I stop/start or reboot my VM?</a><br> \r\n<a href="#console">How do I access my VM via the default console?</a><br>\r\n<a href="#delete">How do I delete a VM?</a><br>\r\n<a href="#activate">How do I activate the copy of Windows Server 2019 on my VM?</a><br>\r\n<a href="#multiple">How do I create multiple VMs (On-demand compute machines)?</a><br>\r\n<a href="#volcreatedel">How can I create and delete a volume</a><br />\r\n<a href="#manage">How do I manage volume attachments on my VM?</a><br>\r\n<a href="#volresize">How do I resize my volume?</a><br>\r\n<a href="#feedback">How do I submit a bug, proposed feature or feedback in general?</a><br>\r\n<div class="row">&nbsp;</div>\r\n\r\n\r\n<h1>How to connect</h1>\r\n<div id="hypatia-use"></div><br><br><br>\r\n<h2>Who can use HYPATIA?</h2>\r\nAnyone having an active ELIXIR AAI account can login to HYPATIA. For details about what an ELIXIR AAI account is and how to get one, see below.\r\n<br><a href="#back">Back to top </a><br>\r\n<div id="aai-what"></div><br><br><br>  \r\n<h2 id="aai-what">What is the ELIXIR AAI?</h2>\r\nThe ELIXIR Authentication and Authorisation Infrastructure (AAI) is a Single Sign-On (SSO) service that enables researchers to use their home organization credentials or community or commercial identities (e.g. ORCID, LinkedIn) to sign in and access data and services they need. It also allows service providers (both in academia and industry) to control and manage the access rights of their users and create different access levels for research groups or international projects. This facilitates easy access to ELIXIR services and resources for researchers, by removing the need to remember different passwords for each service and instead using their institutional credentials to sign in via their home institution.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="aai-account"></div><br><br><br>\r\n<h2>How do I create an ELIXIR AAI account?</h2>\r\n<div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/about1.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\nBy pressing the “Login” button on the upper right-hand corner of the HYPATIA platform the following screen will be loaded:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/register2.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\nYou will need press the register button, in order to be transferred to the ELIXIR AAI login page, where you will need to select your preferred method of login (Institutional account, Google, ORCID or LinkedIn):\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/3elixir.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n If your institution does not appear in the list of available institutions, then you need to add it to the system by clicking on the “Cannot find your institution” button:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/4search.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n After selecting the preferred method of login you will be transferred to the respective interface to login. Then you need to follow the instructions from the ELIXIR AAI interface to create a new account with a username of your choice.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="aai-login"></div><br><br><br>\r\n<h2>How do I login to HYPATIA using my newly created ELIXIR AAI account?</h2>\r\n<div class="row">&nbsp;</div>\r\nYou need to follow the same procedure as registering, but instead of pressing the “REGISTER”, you press the “LOGIN” button:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/login5.png" width="70%"">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n\r\nThen you need to select your preferred login method, as before, and then you are redirected to the hypatia website where you have been logged-in using your ELIXIR AAI username:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/active.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="data"></div><br><br><br>\r\n<h2> What data do you keep in the HYPATIA database regarding my ELIXIR AAI Account?</h2>\r\n\r\nIn accordance with our Privacy policy, the only information stored in our database is your ELIXIR AAI username that you selected when you created your account, which is necessary for authentication purposes required by the HYPATIA website. The data are not shared with any third party and you reserve your right to ask for their deletion at any time, in accordance with the GDPR. No other sensitive information regarding your e-mail, institution or other personal information is retrieved from the service.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="passw"></div><br><br><br>\r\n<h2>What happens if I forget my password?</h2>\r\n\r\nSince we use a Single Sign-On service (SSO) your password is not stored by HYPATIA, but rather by your institution or the service that you use to login to the ELIXIR AAI, you need to follow the appropriate procedures of the respective organization to reset your password.\r\n<br><a href="#back">Back to top </a><br><br><br>\r\n\r\n\r\n<h1>HYPATIA</h1>\r\n\r\n<div id="users"></div><br><br><br>\r\n<h2>What are the available user types in HYPATIA?</h2>\r\n\r\nCurrently, based on their position of each individual in their organisation, HYPATIA users will be classified in one of the following user types:\r\n<ul>\r\n<li>Bronze: This type of user is the one with the less privileges and the most limitations. It is assigned as the default type upon registration. It can be used for testing or educational purposes during training events (indicatively). </li>\r\n<li>Silver user: This type of user is suitable for regular lab members. </li>\r\n<li>Gold user: This type of user is for Principal Investigators and it comes with extended quotas and permissions.\r\n<br><br>In order to upgrade your account from bronze to silver or gold, click <a href="index.php?r=ticket-user%2Fopen&upgrade=1">here</a> to create a new ticket request, stating your position and your team’s Principal Investigator.  </li>\r\n</ul>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="project-types"></div><br><br><br>\r\n<h2>What project types exist in HYPATIA?</h2>\r\n<ul>\r\n<li>“24/7 services” projects. This type of project is suitable for hosting 24/7 services, following the Virtual Private Server (VPS) model. The focus is on relatively lightweight services (e.g., Web server, API endpoint, database); computationally intensive projects should be served by “on-demand batch computations” or “on-demand computation machine” projects (see below). </li>  \r\n<li>On-demand batch computations” projects. This type of project is suitable for batches of computational tasks to be executed. Each computational task could involve the execution of a particular software product or of a workflow that combines many software products. </li>\r\n<li>“On-demand computation machines” projects. This type of project is suitable for (short-term) computational experiments that are not containerised. A VM having particular characteristics is provided to the user. It is available only for gold users. </li>\r\n<li>“Storage volumes” projects. This type of project is suitable for creating storage volumes that can be attached to VMs that belong to “24/7 services” or “On-demand computation machines” projects. Storage volumes for “On-demand computation machines” projects are only available to gold users.</li>\r\n</ul>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="new-proj"></div><br><br><br>\r\n<h2>How do I create a new project?</h2>\r\nPress the “New project on the top right corner:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/newproject.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n \r\nThe system will load a new page where you can select the project type you need:\r\n  <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/projects.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="24/7"></div><br><br><br>\r\n<h2>How do I create a new “24/7 services” project?</h2>\r\nPress on the “24/7 service button” on the new project page. The following screen will appear:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/247.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n\r\nYou then need to fill in the required information and click on the submit button:\r\n<ul>\r\n<li> Name: The name of the project .</li>\r\n<li> End date: Use the pop-up calendar to provide an ending date for the project.</li>\r\n<li>Maximum number of participating users: Select the maximum number of users, who need to access the project’s resources.</li>\r\n<li>Participating users: Enter the usernames of the users you would like to add as participants and select the appropriate value from the auto-complete box.</li>\r\n<li>Technology Readiness Level (TRL): read more here: https://en.wikipedia.org/wiki/Technology_readiness_level.</li>\r\n<li>Name of the 24/7 service: name of an existing or proposed service, to which the requested resources will be allocated.</li>\r\n<li>Version of the 24/7 service: version of the service.</li>\r\n<li>Description of the 24/7 service: Write a short description regarding the existing/proposed service.</li>\r\n<li>Existing service URL: A URL to the existing service (if applicable).</li>\r\n<li>VM configuration: Select one of the available configurations for the VM you would like to create. (IMPORTANT: VMs with Solid State Disk (SSD) use ephemeral storage and therefore, we cannot guarantee the safety of the data).</li>\r\n</ul>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="ondemand"></div><br><br><br>\r\n<h2>How do I create a new “On-demand batch computations” project?</h2>\r\nPress on the “On-demand batch computations” project on the new project page. The following screen will appear:\r\n<div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/ondemand.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\nYou then need to fill in the required information and click on the submit button:\r\n<ul>\r\n<li>  Name: The name of the project\r\n<li>    End date: Use the pop-up calendar to provide an ending date for the project\r\n<li>    Maximum number of participating users: Select the maximum number of users, who need to access the project’s resources.\r\n<li>    Participating users: Enter the usernames of the users you would like to add as participants and select the appropriate value from the auto-complete box.\r\n<li>    Type of analysis: The type of analysis you would like to perform using containerized software.\r\n<li>    Maturity: Select the appropriate maturity level of the analysis\r\n<li>  Description: Write a short description of what the analysis does.\r\n<li>    Maximum number of jobs: The maximum number of jobs that will be run on HYPATIA-COMPUTE.\r\n<li>    Available cores per job: The maximum number of virtual cores that will be allocated per job.\r\n<li>    Maximum allowed memory: The maximum number of Random Access Memory (RAM) that will be allocated per job.\r\n</ul>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="machine"></div><br><br><br>\r\n<h2>How do I create a new “On-demand computation machines” project (available only to gold users)?</h2>\r\nPress on the “On-demand computation machines” project on the new project page. The following screen will appear:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/machine.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n You then need to fill in the required information and click on the submit button:\r\n<ul>\r\n<li>    Name: The name of the project. </li>\r\n<li>    End date: Use the pop-up calendar to provide an ending date for the project. Keep in mind that you cannot select a date that is later than 30 days.</li>\r\n<li>    Maximum number of participating users: Select the maximum number of users, who need to access the project’s resources.</li>\r\n<li>    Participating users: Enter the usernames of the users you would like to add as participants and select the appropriate value from the auto-complete box.</li>\r\n<li>    Analysis description: A short description of the analysis that will be performed on the VM.</li>\r\n<li>    VM configuration: select one of the available configurations for the VM you would like to create. (IMPORTANT: VMs with Solid State Disk (SSD) use ephemeral storage and therefore, we cannot guarantee the safety of the data).</li>\r\n<li>    Number of VMs: When a number of smaller VMs are required, then you can select up to 30 VMs.</li>\r\n</ul>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="storage"></div><br><br><br>\r\n<h2>How do I create a new “Storage volume” project?</h2>\r\nPress on the “Storage volumes” project on the new project page. The following screen will appear:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/storage.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n You then need to fill in the required information and click on the submit button:\r\n<ul>\r\n<li>    Name: The name of the project. </li>\r\n<li>    Maximum number of participating users: Select the maximum number of users, who need to access the project’s resources.</li>\r\n<li>    Participating users: Enter the usernames of the users you would like to add as participants and select the appropriate value from the auto-complete box.</li>\r\n<li>    Description: A short description.</li>\r\n<li>    Volume type: At the moment, only “hot storage” is supported.</li>\r\n<li>    VM type: Storage projects can be created for 24/7 service VMs as well as on-demand computation machines VMs (available only to gold users). Note that, after submission the VM type cannot be changed.</li>\r\n</ul>\r\nAfter the acceptance of the project, you will need to create the volume from HYPATIA’s interfacea volume is created automatically. Keep in mind that a volume can be attached only to one VM at a time and multi-attach functionality is not supported.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="request"></div><br><br><br>\r\n<h2>What happens after I submit a project request?</h2>\r\nAfter you submit a project request, it is reviewed according to the access policy of HYPATIA. Once a decision is reached you will get notified on the website. If you would like to receive notifications via e-mail, then enter your e-mail address in the system (see question: “How do I get notifications by e-mail instead of only on the interface”).\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="notif"></div><br><br><br>\r\n<h2> Why did I get a notification saying my project was automatically accepted?</h2>\r\nEach user has a limited number of Automatically Accepted Projects (AAPs), i.e., projects that can be accepted without review: bronze users may create up to 1 AAP, silver users up to 3 AAPs, gold users up to 3 AAPs. On-demand compute machines projects are not automatically accepted. \r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="expire"></div><br><br><br>\r\n<h2>What happens when my project is close to the expiration date?</h2>\r\nYou will get notifications on the interface 30, 15, 5 and 1 day before expiration. If you would like to receive notifications via e-mail, then enter your e-mail address in the system.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="email"></div><br><br><br>\r\n<h2> How do I get notifications by e-mail instead of only on the interface?</h2>\r\nYou need to select “User options” from the top menu and then “Email notifications”. You will see the following page:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/email.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n You will need to enter the e-mail address on which you would like to receive notifications and also select which notifications you would like to receive and finally press submit. These settings can be modified at any time. \r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="list"></div><br><br><br> \r\n<h2>Is there a list of all my previous requests?</h2>\r\nOn your dashboard, press the “Project requests” button:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/userprojects.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n <br><a href="#back">Back to top </a><br>\r\n\r\n<div id="update"></div><br><br><br>\r\n<h2>How do I update my projects?</h2>\r\nYou press the “Update” button for the project on your dashboard: \r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/update.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="forget"></div><br><br><br>\r\n<h2>I forgot to update my project expiration date and it expired. What can I do?</h2>\r\nPlease contact an administrator and provide the name of your project.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="details"></div><br><br><br>\r\n<h2>How do I view details about my projects?</h2>\r\nYou press the “Details” button for the project on your dashboard:\r\n<div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/details.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n <br><a href="#back">Back to top </a><br>\r\n\r\n<div id="access"></div><br><br><br>\r\n<h2>My project was approved. How do I access the resources?</h2>\r\nYou press the “Access” button for the project on your dashboard:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/access.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n <br><a href="#back">Back to top </a><br>\r\n\r\n<div id="vm"></div><br><br><br>\r\n<h2>How do I create a VM (24/7 services, on-demand computation machines)?</h2>\r\nYou press the “Access” button for the project and then you are transferred to the following page:\r\n  <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/vmcreate.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\nYou need to upload a file containing a public SSH key, select the Operating System (OS) image you would like to use from the list and press submit. The creation process \r\nmay take up to several minutes to complete (especially for windows machines). After the VM is created, you can see its details on the “VM details page” (see below).\r\n  <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/vmdetails.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="connection"></div><br><br><br>\r\n<h2> What are the connection details for my VM? </h2>  \r\nYou can view the IP address for the VM, as well as the default username with which the VM can be accessed. Also, you can see the storage that has been attached to the VM and you can shut down, start, reboot and access your VM via Console. Finally, by pressing the delete button you can delete your VM.\r\nFor VMs using the Windows server OS, you will see a button titled “Retrieve password” where you can retrieve the password for the “Administrator” user. You need to save it because it cannot be retrieved again.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="start"></div><br><br><br>\r\n<h2>Can I stop/start or reboot my VM?</h2> \r\nYes, you can, by pressing the appropriate buttons on the VM details page.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="console"></div><br><br><br>\r\n<h2>How do I access my VM via the default console?</h2>\r\nPress the appropriate button on the VM details page.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="delete"></div><br><br><br>\r\n<h2>How do I delete a VM?</h2>\r\nPress the appropriate button on the VM details page.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="activate"></div><br><br><br>\r\n<h2>How do I activate the copy of Windows Server 2019 on my VM?</h2>\r\nYou need to acquire a valid Windows Server 2019 Standard Edition licence key. Then you need to open a console on the VM and enter the following command:<br><br>\r\n\r\n<i>DISM /online /Set-Edition:ServerStandard /ProductKey:XXXXX-XXXXX-XXXXX-XXXXX-XXXXX /AcceptEula</i><br><br>\r\n\r\nWhere XXX is your key. After that, you need to execute:<br><br>\r\n\r\n<i>slmgr /xpr </i><br><br>\r\n\r\nto check that the OS has been activated correctly.\r\n\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="multiple"></div><br><br><br>\r\n<h2>How do I create multiple VMs (On-demand compute machines)?</h2>\r\nPress the access button and the following page (where you can create and administer each VM will load:\r\n<div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/multiplevm.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="volcreatedel"></div><br><br><br>\r\n<h2>How do I create and delete a volume?</h2>\r\nPress the “Access” button for the project and the following page will load:\r\n  <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/volcreatedel.png" width="70%">\r\n</div>\r\n\r\n<div id="manage"></div><br><br><br>\r\n<h2>How do I manage volume attachments on my VM?</h2>\r\nPress the “Access” button for the project and the following page will load:\r\n  <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/volumes.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n\r\nYou can see the name of the volume, the creation date, and which machine to which it is attached. Moreover, by pressing the “Manage Attachment” button, the following page opens:\r\n  <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/manage.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div> \r\nwhere you can select a VM from the drop-down list to which to attach the volume.\r\nIf the volume is already attached, you will see the following page:\r\n  <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/detach.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\nwhere you can choose to detach the volume from the VM.\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="volresize"></div><br><br><br>\r\n<h2>How do I resize my volume?</h2>\r\nYou need to edit the appropriate volume storage project and enter the new value. Then you need to delete and re-create your volume.\r\n<div class="row">&nbsp;</div>\r\n<br><a href="#back">Back to top </a><br>\r\n\r\n<div id="feedback"></div><br><br><br>\r\n<h2>How do I submit a bug, proposed feature or feedback in general?</h2>\r\nYou can find the bug/suggestion box at the right side of the page:\r\n <div class="row">&nbsp;</div>\r\n<div class="text-center">\r\n<img src="/img/faq/feedback.png" width="70%">\r\n</div>\r\n<div class="row">&nbsp;</div>\r\n<br><a href="#back">Back to top </a><br>\r\n
\.


--
-- Data for Name: project; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.project (id, name, status, latest_project_request_id, pending_request_id, project_type, favorite, start_date) FROM stdin;
\.


--
-- Data for Name: project_request; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.project_request (id, name, duration, user_num, user_list, backup_services, viewed, status, submitted_by, submission_date, assigned_to, project_type, project_id, approval_date, approved_by, deletion_date, end_date, additional_resources, louros) FROM stdin;
\.


--
-- Data for Name: service_autoaccept; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_autoaccept (vms, cores, ips, ram, storage, user_type, id, autoaccept_number) FROM stdin;
\.


--
-- Data for Name: service_limits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_limits (vms, cores, ips, ram, storage, user_type, duration, id, number_of_projects) FROM stdin;
1	4	1	8	250	bronze	180	6	10
1	4	1	16	500	silver	360	4	10
1	8	1	32	1024	gold	720	2	10
\.


--
-- Data for Name: service_request; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_request (id, name, version, description, url, num_of_vms, num_of_cores, num_of_ips, ram, storage, request_id, trl, vm_flavour, disk, additional_resources) FROM stdin;
\.


--
-- Data for Name: smtp; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.smtp (id, encryption, host, username, port, password) FROM stdin;
\.


--
-- Data for Name: ticket_body; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ticket_body (id, id_head, name_user, text, client, date) FROM stdin;
197	112	superadmin	h55	0	2024-10-08 11:11:19
198	113	superadmin	f44	0	2024-10-21 08:16:23
\.


--
-- Data for Name: ticket_file; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ticket_file (id, id_body, "fileName", document_name) FROM stdin;
\.


--
-- Data for Name: ticket_head; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ticket_head (id, user_id, department, topic, status, date_update, page) FROM stdin;
\.


--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."user" (id, username, auth_key, password_hash, confirmation_token, status, superadmin, created_at, updated_at, registration_ip, bind_to_ip, email, email_confirmed, name, surname) FROM stdin;
217	superadmin	gLMB9vX6J1Ww54AM6_yAmVl1DAKY1sBm	$2y$13$ULo4XN7L0vTzfcbjDuaRGus2CyGHrn9bFv6h55WReV133hCRqeWTa	\N	1	1	1729492671	1729492671	\N	\N	user@example.com	1	\N	\N
\.


--
-- Data for Name: user_visit_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_visit_log (id, token, ip, language, user_agent, user_id, visit_time, browser, os) FROM stdin;
468	6715f6cbecba5	::1	el	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36	217	1729492683	Chrome	Windows
\.


--
-- Data for Name: vm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.vm (id, ip_address, ip_id, vm_id, public_key, image_id, image_name, request_id, active, keypair_name, created_by, deleted_by, volume_id, created_at, deleted_at, do_not_delete_disk, windows_unique_id, read_win_password, project_id, name) FROM stdin;
\.


--
-- Data for Name: vm_machines; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.vm_machines (id, ip_address, ip_id, vm_id, public_key, image_id, image_name, request_id, active, keypair_name, created_by, deleted_by, volume_id, created_at, deleted_at, do_not_delete_disk, windows_unique_id, read_win_password, project_id, project_multiple_order, name) FROM stdin;
\.


--
-- Name: analytics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.analytics_id_seq', 1, true);


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 24, true);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 1, false);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- Name: cold_storage_autoaccept_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cold_storage_autoaccept_id_seq', 6, true);


--
-- Name: cold_storage_limits_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cold_storage_limits_id_seq', 6, true);


--
-- Name: cold_storage_request_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cold_storage_request_id_seq', 169, true);


--
-- Name: cron_job_id_cron_job_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cron_job_id_cron_job_seq', 611, true);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 1, false);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 6, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 18, true);


--
-- Name: email_events_admin_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.email_events_admin_id_seq', 6, true);


--
-- Name: email_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.email_events_id_seq', 17, true);


--
-- Name: email_events_moderator_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.email_events_moderator_id_seq', 7, true);


--
-- Name: email_events_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.email_events_user_id_seq', 46, true);


--
-- Name: email_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.email_id_seq', 1948, true);


--
-- Name: email_verification_id_seq_1; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.email_verification_id_seq_1', 48, true);


--
-- Name: hot_volumes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.hot_volumes_id_seq', 139, true);


--
-- Name: jupyter_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.jupyter_id_seq', 377, true);


--
-- Name: jupyter_images_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.jupyter_images_id_seq', 14, true);


--
-- Name: jupyter_server_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.jupyter_server_id_seq', 281, true);


--
-- Name: machine_compute_limits_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.machine_compute_limits_id_seq', 3, true);


--
-- Name: machine_compute_request_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.machine_compute_request_id_seq', 121, true);


--
-- Name: notification_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.notification_id_seq', 4021, true);


--
-- Name: notification_recipient_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.notification_recipient_id_seq', 1, false);


--
-- Name: ondemand_autoaccept_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ondemand_autoaccept_id_seq', 6, true);


--
-- Name: ondemand_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ondemand_id_seq', 346, true);


--
-- Name: ondemand_limits_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ondemand_limits_id_seq', 6, true);


--
-- Name: openstack_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.openstack_id_seq', 1, true);


--
-- Name: pages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pages_id_seq', 4, true);


--
-- Name: project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.project_id_seq', 1428, true);


--
-- Name: project_id_seq1; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.project_id_seq1', 719, true);


--
-- Name: service_autoaccept_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.service_autoaccept_id_seq', 6, true);


--
-- Name: service_limits_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.service_limits_id_seq', 6, true);


--
-- Name: services_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.services_id_seq', 369, true);


--
-- Name: services_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.services_project_id_seq', 23, true);


--
-- Name: smtp_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.smtp_id_seq', 1, true);


--
-- Name: ticket_body_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ticket_body_id_seq', 198, true);


--
-- Name: ticket_file_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ticket_file_id_seq', 11, true);


--
-- Name: ticket_head_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ticket_head_id_seq', 113, true);


--
-- Name: user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_id_seq', 217, true);


--
-- Name: user_visit_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_visit_log_id_seq', 468, true);


--
-- Name: vm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.vm_id_seq', 245, true);


--
-- Name: vm_machines_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.vm_machines_id_seq', 79, true);


--
-- Name: analytics analytics_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analytics
    ADD CONSTRAINT analytics_pkey PRIMARY KEY (id);


--
-- Name: auth_assignment auth_assignment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_assignment
    ADD CONSTRAINT auth_assignment_pkey PRIMARY KEY (item_name, user_id);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_item_child auth_item_child_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_item_child
    ADD CONSTRAINT auth_item_child_pkey PRIMARY KEY (parent, child);


--
-- Name: auth_item_group auth_item_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_item_group
    ADD CONSTRAINT auth_item_group_pkey PRIMARY KEY (code);


--
-- Name: auth_item auth_item_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_item
    ADD CONSTRAINT auth_item_pkey PRIMARY KEY (name);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_rule auth_rule_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_rule
    ADD CONSTRAINT auth_rule_pkey PRIMARY KEY (name);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: cold_storage_autoaccept cold_storage_autoaccept_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cold_storage_autoaccept
    ADD CONSTRAINT cold_storage_autoaccept_pkey PRIMARY KEY (id);


--
-- Name: cold_storage_limits cold_storage_limits_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cold_storage_limits
    ADD CONSTRAINT cold_storage_limits_pkey PRIMARY KEY (id);


--
-- Name: cold_storage_request cold_storage_request_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cold_storage_request
    ADD CONSTRAINT cold_storage_request_pkey PRIMARY KEY (id);


--
-- Name: cron_job cron_job_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cron_job
    ADD CONSTRAINT cron_job_pkey PRIMARY KEY (id_cron_job);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: email_events_admin email_events_admin_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_events_admin
    ADD CONSTRAINT email_events_admin_pkey PRIMARY KEY (id);


--
-- Name: email_events_moderator email_events_moderator_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_events_moderator
    ADD CONSTRAINT email_events_moderator_pkey PRIMARY KEY (id);


--
-- Name: email_events email_events_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_events
    ADD CONSTRAINT email_events_pkey PRIMARY KEY (id);


--
-- Name: email_events_user email_events_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_events_user
    ADD CONSTRAINT email_events_user_pkey PRIMARY KEY (id);


--
-- Name: email email_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email
    ADD CONSTRAINT email_pkey PRIMARY KEY (id);


--
-- Name: email_verification email_verification_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.email_verification
    ADD CONSTRAINT email_verification_pkey PRIMARY KEY (id);


--
-- Name: hot_volumes hot_volumes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.hot_volumes
    ADD CONSTRAINT hot_volumes_pkey PRIMARY KEY (id);


--
-- Name: jupyter_autoaccept jupyter_autoaccept_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jupyter_autoaccept
    ADD CONSTRAINT jupyter_autoaccept_pkey PRIMARY KEY (id);


--
-- Name: jupyter_images jupyter_images_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jupyter_images
    ADD CONSTRAINT jupyter_images_pkey PRIMARY KEY (id);


--
-- Name: jupyter_limits jupyter_limits_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jupyter_limits
    ADD CONSTRAINT jupyter_limits_pkey PRIMARY KEY (id);


--
-- Name: jupyter_request_n jupyter_request_n_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jupyter_request_n
    ADD CONSTRAINT jupyter_request_n_pkey PRIMARY KEY (id);


--
-- Name: jupyter_request jupyter_request_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jupyter_request
    ADD CONSTRAINT jupyter_request_pkey PRIMARY KEY (id);


--
-- Name: jupyter_server jupyter_server_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jupyter_server
    ADD CONSTRAINT jupyter_server_pkey PRIMARY KEY (id);


--
-- Name: machine_compute_limits machine_compute_limits_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.machine_compute_limits
    ADD CONSTRAINT machine_compute_limits_pkey PRIMARY KEY (id);


--
-- Name: machine_compute_request machine_compute_request_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.machine_compute_request
    ADD CONSTRAINT machine_compute_request_pkey PRIMARY KEY (id);


--
-- Name: migration migration_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.migration
    ADD CONSTRAINT migration_pkey PRIMARY KEY (version);


--
-- Name: notification notification_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_pkey PRIMARY KEY (id);


--
-- Name: ondemand_autoaccept ondemand_autoaccept_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ondemand_autoaccept
    ADD CONSTRAINT ondemand_autoaccept_pkey PRIMARY KEY (id);


--
-- Name: ondemand_limits ondemand_limits_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ondemand_limits
    ADD CONSTRAINT ondemand_limits_pkey PRIMARY KEY (id);


--
-- Name: ondemand_request ondemand_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ondemand_request
    ADD CONSTRAINT ondemand_pkey PRIMARY KEY (id);


--
-- Name: openstack_machines openstack_machines_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.openstack_machines
    ADD CONSTRAINT openstack_machines_pkey PRIMARY KEY (id);


--
-- Name: openstack openstack_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.openstack
    ADD CONSTRAINT openstack_pkey PRIMARY KEY (id);


--
-- Name: pages pages_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pages
    ADD CONSTRAINT pages_pkey PRIMARY KEY (id);


--
-- Name: project_request project_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project_request
    ADD CONSTRAINT project_pkey PRIMARY KEY (id);


--
-- Name: project project_pkey1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.project
    ADD CONSTRAINT project_pkey1 PRIMARY KEY (id);


--
-- Name: service_autoaccept service_autoaccept_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_autoaccept
    ADD CONSTRAINT service_autoaccept_pkey PRIMARY KEY (id);


--
-- Name: service_limits service_limits_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_limits
    ADD CONSTRAINT service_limits_pkey PRIMARY KEY (id);


--
-- Name: service_request services_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_request
    ADD CONSTRAINT services_pkey PRIMARY KEY (id);


--
-- Name: smtp smtp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.smtp
    ADD CONSTRAINT smtp_pkey PRIMARY KEY (id);


--
-- Name: ticket_body ticket_body_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ticket_body
    ADD CONSTRAINT ticket_body_pkey PRIMARY KEY (id);


--
-- Name: ticket_file ticket_file_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ticket_file
    ADD CONSTRAINT ticket_file_pkey PRIMARY KEY (id);


--
-- Name: ticket_head ticket_head_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ticket_head
    ADD CONSTRAINT ticket_head_pkey PRIMARY KEY (id);


--
-- Name: user user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_pkey PRIMARY KEY (id);


--
-- Name: user_visit_log user_visit_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_visit_log
    ADD CONSTRAINT user_visit_log_pkey PRIMARY KEY (id);


--
-- Name: vm_machines vm_machines_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vm_machines
    ADD CONSTRAINT vm_machines_pkey PRIMARY KEY (id);


--
-- Name: vm vm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vm
    ADD CONSTRAINT vm_pkey PRIMARY KEY (id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: hot_volumes_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX hot_volumes_active ON public.hot_volumes USING btree (active);


--
-- Name: hot_volumes_project_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX hot_volumes_project_id_idx ON public.hot_volumes USING btree (project_id);


--
-- Name: hot_volumes_vm_type_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX hot_volumes_vm_type_idx ON public.hot_volumes USING btree (vm_type);


--
-- Name: i_id_body; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX i_id_body ON public.ticket_file USING btree (id_body);


--
-- Name: i_ticket_body; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX i_ticket_body ON public.ticket_body USING btree (id_head);


--
-- Name: i_ticket_head; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX i_ticket_head ON public.ticket_head USING btree (user_id);


--
-- Name: idx-auth_item-type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "idx-auth_item-type" ON public.auth_item USING btree (type);


--
-- Name: idx_jupyter_project_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_jupyter_project_id ON public.jupyter_request USING btree (request_id);


--
-- Name: idx_ondemand_project_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_ondemand_project_id ON public.ondemand_request USING btree (request_id);


--
-- Name: idx_service_project_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_project_id ON public.service_request USING btree (request_id);


--
-- Name: jupyter_images_description_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX jupyter_images_description_idx ON public.jupyter_images USING btree (description);


--
-- Name: jupyter_server_active_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX jupyter_server_active_idx ON public.jupyter_server USING btree (active);


--
-- Name: jupyter_server_created_by_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX jupyter_server_created_by_idx ON public.jupyter_server USING btree (created_by);


--
-- Name: jupyter_server_project_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX jupyter_server_project_idx ON public.jupyter_server USING btree (project);


--
-- Name: jupyter_server_server_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX jupyter_server_server_id_idx ON public.jupyter_server USING btree (server_id);


--
-- Name: latest_project_request_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX latest_project_request_id_idx ON public.project USING btree (latest_project_request_id);


--
-- Name: project_name_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_name_idx ON public.project USING btree (name);


--
-- Name: project_pending_request_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_pending_request_id_idx ON public.project USING btree (pending_request_id);


--
-- Name: project_request_approval_date_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_request_approval_date_idx ON public.project_request USING btree (approval_date);


--
-- Name: project_request_end_date_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_request_end_date_idx ON public.project_request USING btree (end_date);


--
-- Name: project_request_name_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_request_name_idx ON public.project_request USING btree (name);


--
-- Name: project_request_submission_date_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_request_submission_date_idx ON public.project_request USING btree (submission_date);


--
-- Name: project_request_submitted_by_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_request_submitted_by_idx ON public.project_request USING btree (submitted_by);


--
-- Name: project_request_user_list_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_request_user_list_idx ON public.project_request USING btree (user_list);


--
-- Name: vm_active_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX vm_active_idx ON public.vm USING btree (active);


--
-- Name: vm_machines_active_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX vm_machines_active_idx ON public.vm_machines USING btree (active);


--
-- Name: vm_machines_project_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX vm_machines_project_id_idx ON public.vm_machines USING btree (project_id);


--
-- Name: vm_machines_request_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX vm_machines_request_idx ON public.vm_machines USING btree (request_id);


--
-- Name: vm_project_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX vm_project_id_idx ON public.vm USING btree (project_id);


--
-- Name: vm_request_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX vm_request_idx ON public.vm USING btree (request_id);


--
-- Name: auth_assignment auth_assignment_item_name_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_assignment
    ADD CONSTRAINT auth_assignment_item_name_fkey FOREIGN KEY (item_name) REFERENCES public.auth_item(name) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: auth_assignment auth_assignment_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_assignment
    ADD CONSTRAINT auth_assignment_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_item auth_item_rule_name_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_item
    ADD CONSTRAINT auth_item_rule_name_fkey FOREIGN KEY (rule_name) REFERENCES public.auth_rule(name) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_item fk_auth_item_group_code; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_item
    ADD CONSTRAINT fk_auth_item_group_code FOREIGN KEY (group_code) REFERENCES public.auth_item_group(code) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: ticket_file fk_id_body; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ticket_file
    ADD CONSTRAINT fk_id_body FOREIGN KEY (id_body) REFERENCES public.ticket_body(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: ticket_head fk_ticket_head; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ticket_head
    ADD CONSTRAINT fk_ticket_head FOREIGN KEY (user_id) REFERENCES public."user"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: user_visit_log user_visit_log_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_visit_log
    ADD CONSTRAINT user_visit_log_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: TABLE analytics; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.analytics TO clima;


--
-- Name: SEQUENCE analytics_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.analytics_id_seq TO clima;


--
-- Name: TABLE auth_assignment; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_assignment TO clima;


--
-- Name: TABLE auth_group; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_group TO clima;


--
-- Name: SEQUENCE auth_group_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.auth_group_id_seq TO clima;


--
-- Name: TABLE auth_group_permissions; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_group_permissions TO clima;


--
-- Name: SEQUENCE auth_group_permissions_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.auth_group_permissions_id_seq TO clima;


--
-- Name: TABLE auth_item; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_item TO clima;


--
-- Name: TABLE auth_item_child; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_item_child TO clima;


--
-- Name: TABLE auth_item_group; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_item_group TO clima;


--
-- Name: TABLE auth_permission; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_permission TO clima;


--
-- Name: SEQUENCE auth_permission_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.auth_permission_id_seq TO clima;


--
-- Name: TABLE auth_rule; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_rule TO clima;


--
-- Name: TABLE auth_user; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_user TO clima;


--
-- Name: TABLE auth_user_groups; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_user_groups TO clima;


--
-- Name: SEQUENCE auth_user_groups_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.auth_user_groups_id_seq TO clima;


--
-- Name: SEQUENCE auth_user_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.auth_user_id_seq TO clima;


--
-- Name: TABLE auth_user_user_permissions; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.auth_user_user_permissions TO clima;


--
-- Name: SEQUENCE auth_user_user_permissions_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.auth_user_user_permissions_id_seq TO clima;


--
-- Name: TABLE cold_storage_autoaccept; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.cold_storage_autoaccept TO clima;


--
-- Name: SEQUENCE cold_storage_autoaccept_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.cold_storage_autoaccept_id_seq TO clima;


--
-- Name: TABLE cold_storage_limits; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.cold_storage_limits TO clima;


--
-- Name: SEQUENCE cold_storage_limits_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.cold_storage_limits_id_seq TO clima;


--
-- Name: TABLE cold_storage_request; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.cold_storage_request TO clima;


--
-- Name: SEQUENCE cold_storage_request_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.cold_storage_request_id_seq TO clima;


--
-- Name: TABLE configuration; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.configuration TO clima;


--
-- Name: TABLE cron_job; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.cron_job TO clima;


--
-- Name: SEQUENCE cron_job_id_cron_job_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.cron_job_id_cron_job_seq TO clima;


--
-- Name: TABLE django_admin_log; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.django_admin_log TO clima;


--
-- Name: SEQUENCE django_admin_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.django_admin_log_id_seq TO clima;


--
-- Name: TABLE django_content_type; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.django_content_type TO clima;


--
-- Name: SEQUENCE django_content_type_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.django_content_type_id_seq TO clima;


--
-- Name: TABLE django_migrations; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.django_migrations TO clima;


--
-- Name: SEQUENCE django_migrations_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.django_migrations_id_seq TO clima;


--
-- Name: TABLE django_session; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.django_session TO clima;


--
-- Name: TABLE email; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.email TO clima;


--
-- Name: TABLE email_events; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.email_events TO clima;


--
-- Name: TABLE email_events_admin; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.email_events_admin TO clima;


--
-- Name: SEQUENCE email_events_admin_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.email_events_admin_id_seq TO clima;


--
-- Name: SEQUENCE email_events_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.email_events_id_seq TO clima;


--
-- Name: TABLE email_events_moderator; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.email_events_moderator TO clima;


--
-- Name: SEQUENCE email_events_moderator_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.email_events_moderator_id_seq TO clima;


--
-- Name: TABLE email_events_user; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.email_events_user TO clima;


--
-- Name: SEQUENCE email_events_user_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.email_events_user_id_seq TO clima;


--
-- Name: SEQUENCE email_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.email_id_seq TO clima;


--
-- Name: SEQUENCE email_verification_id_seq_1; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.email_verification_id_seq_1 TO clima;


--
-- Name: TABLE email_verification; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.email_verification TO clima;


--
-- Name: TABLE hot_volumes; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.hot_volumes TO clima;


--
-- Name: SEQUENCE hot_volumes_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.hot_volumes_id_seq TO clima;


--
-- Name: TABLE jupyter_autoaccept; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.jupyter_autoaccept TO clima;


--
-- Name: SEQUENCE jupyter_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.jupyter_id_seq TO clima;


--
-- Name: SEQUENCE jupyter_images_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.jupyter_images_id_seq TO clima;


--
-- Name: TABLE jupyter_images; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.jupyter_images TO clima;


--
-- Name: TABLE jupyter_limits; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.jupyter_limits TO clima;


--
-- Name: TABLE jupyter_request; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.jupyter_request TO clima;


--
-- Name: TABLE jupyter_request_n; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.jupyter_request_n TO clima;


--
-- Name: SEQUENCE jupyter_server_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.jupyter_server_id_seq TO clima;


--
-- Name: TABLE jupyter_server; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.jupyter_server TO clima;


--
-- Name: TABLE machine_compute_limits; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.machine_compute_limits TO clima;


--
-- Name: SEQUENCE machine_compute_limits_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.machine_compute_limits_id_seq TO clima;


--
-- Name: TABLE machine_compute_request; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.machine_compute_request TO clima;


--
-- Name: SEQUENCE machine_compute_request_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.machine_compute_request_id_seq TO clima;


--
-- Name: TABLE migration; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.migration TO clima;


--
-- Name: TABLE notification; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.notification TO clima;


--
-- Name: SEQUENCE notification_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.notification_id_seq TO clima;


--
-- Name: SEQUENCE notification_recipient_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.notification_recipient_id_seq TO clima;


--
-- Name: TABLE ondemand_autoaccept; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.ondemand_autoaccept TO clima;


--
-- Name: SEQUENCE ondemand_autoaccept_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.ondemand_autoaccept_id_seq TO clima;


--
-- Name: TABLE ondemand_request; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.ondemand_request TO clima;


--
-- Name: SEQUENCE ondemand_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.ondemand_id_seq TO clima;


--
-- Name: TABLE ondemand_limits; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.ondemand_limits TO clima;


--
-- Name: SEQUENCE ondemand_limits_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.ondemand_limits_id_seq TO clima;


--
-- Name: TABLE openstack; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.openstack TO clima;


--
-- Name: SEQUENCE openstack_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.openstack_id_seq TO clima;


--
-- Name: TABLE openstack_machines; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.openstack_machines TO clima;


--
-- Name: TABLE pages; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.pages TO clima;


--
-- Name: SEQUENCE pages_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.pages_id_seq TO clima;


--
-- Name: TABLE project; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.project TO clima;


--
-- Name: TABLE project_request; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.project_request TO clima;


--
-- Name: SEQUENCE project_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.project_id_seq TO clima;


--
-- Name: SEQUENCE project_id_seq1; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.project_id_seq1 TO clima;


--
-- Name: TABLE service_autoaccept; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.service_autoaccept TO clima;


--
-- Name: SEQUENCE service_autoaccept_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.service_autoaccept_id_seq TO clima;


--
-- Name: TABLE service_limits; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.service_limits TO clima;


--
-- Name: SEQUENCE service_limits_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.service_limits_id_seq TO clima;


--
-- Name: TABLE service_request; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.service_request TO clima;


--
-- Name: SEQUENCE services_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.services_id_seq TO clima;


--
-- Name: SEQUENCE services_project_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.services_project_id_seq TO clima;


--
-- Name: TABLE smtp; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.smtp TO clima;


--
-- Name: SEQUENCE smtp_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.smtp_id_seq TO clima;


--
-- Name: TABLE ticket_body; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.ticket_body TO clima;


--
-- Name: SEQUENCE ticket_body_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.ticket_body_id_seq TO clima;


--
-- Name: TABLE ticket_file; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.ticket_file TO clima;


--
-- Name: SEQUENCE ticket_file_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.ticket_file_id_seq TO clima;


--
-- Name: TABLE ticket_head; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.ticket_head TO clima;


--
-- Name: SEQUENCE ticket_head_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.ticket_head_id_seq TO clima;


--
-- Name: TABLE "user"; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public."user" TO clima;


--
-- Name: SEQUENCE user_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.user_id_seq TO clima;


--
-- Name: TABLE user_visit_log; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.user_visit_log TO clima;


--
-- Name: SEQUENCE user_visit_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.user_visit_log_id_seq TO clima;


--
-- Name: TABLE vm; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.vm TO clima;


--
-- Name: SEQUENCE vm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.vm_id_seq TO clima;


--
-- Name: TABLE vm_machines; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.vm_machines TO clima;


--
-- Name: SEQUENCE vm_machines_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE public.vm_machines_id_seq TO clima;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: clima
--

ALTER DEFAULT PRIVILEGES FOR ROLE clima IN SCHEMA public GRANT SELECT,INSERT,DELETE,UPDATE ON TABLES TO clima;


--
-- PostgreSQL database dump complete
--

